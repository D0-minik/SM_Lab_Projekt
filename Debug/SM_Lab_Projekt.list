
SM_Lab_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08004de8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004de8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e72  00000000  00000000  0002ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  00031ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255e8  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000babf  00000000  00000000  00058048  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb3d4  00000000  00000000  00063b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014eedb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c0  00000000  00000000  0014ef58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d98 	.word	0x08004d98

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08004d98 	.word	0x08004d98

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b972 	b.w	8000d40 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14b      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4615      	mov	r5, r2
 8000a86:	d967      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0720 	rsb	r7, r2, #32
 8000a92:	fa01 f302 	lsl.w	r3, r1, r2
 8000a96:	fa20 f707 	lsr.w	r7, r0, r7
 8000a9a:	4095      	lsls	r5, r2
 8000a9c:	ea47 0803 	orr.w	r8, r7, r3
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aac:	fa1f fc85 	uxth.w	ip, r5
 8000ab0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab8:	fb07 f10c 	mul.w	r1, r7, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ac6:	f080 811b 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8118 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000ad0:	3f02      	subs	r7, #2
 8000ad2:	442b      	add	r3, r5
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000adc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000afc:	3802      	subs	r0, #2
 8000afe:	442c      	add	r4, r5
 8000b00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b04:	eba4 040c 	sub.w	r4, r4, ip
 8000b08:	2700      	movs	r7, #0
 8000b0a:	b11e      	cbz	r6, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c6 4300 	strd	r4, r3, [r6]
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xbe>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80eb 	beq.w	8000cfa <__udivmoddi4+0x286>
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9c6 0100 	strd	r0, r1, [r6]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f783 	clz	r7, r3
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d147      	bne.n	8000bca <__udivmoddi4+0x156>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd0>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80fa 	bhi.w	8000d38 <__udivmoddi4+0x2c4>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000b52:	e9c6 4800 	strd	r4, r8, [r6]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xe8>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 808f 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b66:	1b49      	subs	r1, r1, r5
 8000b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6c:	fa1f f885 	uxth.w	r8, r5
 8000b70:	2701      	movs	r7, #1
 8000b72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb08 f10c 	mul.w	r1, r8, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x14c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x14a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80b6 	bhi.w	8000d2a <__udivmoddi4+0x2b6>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e79f      	b.n	8000b0a <__udivmoddi4+0x96>
 8000bca:	f1c7 0c20 	rsb	ip, r7, #32
 8000bce:	40bb      	lsls	r3, r7
 8000bd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be8:	4325      	orrs	r5, r4
 8000bea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bee:	0c2c      	lsrs	r4, r5, #16
 8000bf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf4:	fa1f fa8e 	uxth.w	sl, lr
 8000bf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000c00:	429c      	cmp	r4, r3
 8000c02:	fa02 f207 	lsl.w	r2, r2, r7
 8000c06:	fa00 f107 	lsl.w	r1, r0, r7
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	f080 8087 	bcs.w	8000d26 <__udivmoddi4+0x2b2>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f240 8084 	bls.w	8000d26 <__udivmoddi4+0x2b2>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4473      	add	r3, lr
 8000c24:	1b1b      	subs	r3, r3, r4
 8000c26:	b2ad      	uxth	r5, r5
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c38:	45a2      	cmp	sl, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	d26b      	bcs.n	8000d1e <__udivmoddi4+0x2aa>
 8000c46:	45a2      	cmp	sl, r4
 8000c48:	d969      	bls.n	8000d1e <__udivmoddi4+0x2aa>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4474      	add	r4, lr
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	eba4 040a 	sub.w	r4, r4, sl
 8000c5a:	454c      	cmp	r4, r9
 8000c5c:	46c2      	mov	sl, r8
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d354      	bcc.n	8000d0c <__udivmoddi4+0x298>
 8000c62:	d051      	beq.n	8000d08 <__udivmoddi4+0x294>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d069      	beq.n	8000d3c <__udivmoddi4+0x2c8>
 8000c68:	ebb1 050a 	subs.w	r5, r1, sl
 8000c6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	40fc      	lsrs	r4, r7
 8000c78:	ea4c 0505 	orr.w	r5, ip, r5
 8000c7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c80:	2700      	movs	r7, #0
 8000c82:	e747      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f703 	lsr.w	r7, r0, r3
 8000c8c:	4095      	lsls	r5, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	4338      	orrs	r0, r7
 8000c9c:	0c01      	lsrs	r1, r0, #16
 8000c9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ca2:	fa1f f885 	uxth.w	r8, r5
 8000ca6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb07 f308 	mul.w	r3, r7, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x256>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc0:	d22f      	bcs.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d92d      	bls.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc6:	3f02      	subs	r7, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1acb      	subs	r3, r1, r3
 8000ccc:	b281      	uxth	r1, r0
 8000cce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cda:	fb00 f308 	mul.w	r3, r0, r8
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x27e>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ce8:	d217      	bcs.n	8000d1a <__udivmoddi4+0x2a6>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d915      	bls.n	8000d1a <__udivmoddi4+0x2a6>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf8:	e73b      	b.n	8000b72 <__udivmoddi4+0xfe>
 8000cfa:	4637      	mov	r7, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e709      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000d00:	4607      	mov	r7, r0
 8000d02:	e6e7      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d04:	4618      	mov	r0, r3
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d08:	4541      	cmp	r1, r8
 8000d0a:	d2ab      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d10:	eb69 020e 	sbc.w	r2, r9, lr
 8000d14:	3801      	subs	r0, #1
 8000d16:	4613      	mov	r3, r2
 8000d18:	e7a4      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	e7e9      	b.n	8000cf2 <__udivmoddi4+0x27e>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	e795      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d22:	4667      	mov	r7, ip
 8000d24:	e7d1      	b.n	8000cca <__udivmoddi4+0x256>
 8000d26:	4681      	mov	r9, r0
 8000d28:	e77c      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	442c      	add	r4, r5
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0x14c>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	442b      	add	r3, r5
 8000d36:	e72f      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d38:	4638      	mov	r0, r7
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xda>
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0xa0>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	b093      	sub	sp, #76	; 0x4c
 8000d48:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 fd4e 	bl	80017ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f84f 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fa0d 	bl	8001170 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d56:	f000 f9db 	bl	8001110 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d5a:	f000 f8dd 	bl	8000f18 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d5e:	f000 f91b 	bl	8000f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d62:	f000 f97f 	bl	8001064 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BH1750_init(hi2c1,command,BH1750_Status);
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <main+0x98>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <main+0x9c>)
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	4e1d      	ldr	r6, [pc, #116]	; (8000de4 <main+0xa0>)
 8000d70:	9210      	str	r2, [sp, #64]	; 0x40
 8000d72:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d74:	466d      	mov	r5, sp
 8000d76:	f106 0410 	add.w	r4, r6, #16
 8000d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d92:	f000 faf1 	bl	8001378 <BH1750_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lux = BH1750_read(BH1750_Status, hi2c1, data[2]);
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <main+0x9c>)
 8000d98:	f893 c000 	ldrb.w	ip, [r3]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <main+0xa4>)
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	4e10      	ldr	r6, [pc, #64]	; (8000de4 <main+0xa0>)
 8000da2:	9310      	str	r3, [sp, #64]	; 0x40
 8000da4:	466d      	mov	r5, sp
 8000da6:	f106 040c 	add.w	r4, r6, #12
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000dbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	f000 fb06 	bl	80013d4 <BH1750_read>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <main+0xa8>)
 8000dce:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000);
 8000dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd6:	f000 fd65 	bl	80018a4 <HAL_Delay>
	  lux = BH1750_read(BH1750_Status, hi2c1, data[2]);
 8000dda:	e7dc      	b.n	8000d96 <main+0x52>
 8000ddc:	20000138 	.word	0x20000138
 8000de0:	20000000 	.word	0x20000000
 8000de4:	200000ec 	.word	0x200000ec
 8000de8:	20000180 	.word	0x20000180
 8000dec:	2000017c 	.word	0x2000017c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0b4      	sub	sp, #208	; 0xd0
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000dfa:	2230      	movs	r2, #48	; 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 ffc2 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2284      	movs	r2, #132	; 0x84
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 ffb3 	bl	8004d88 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e22:	f001 fcfd 	bl	8002820 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <SystemClock_Config+0x120>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a39      	ldr	r2, [pc, #228]	; (8000f10 <SystemClock_Config+0x120>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <SystemClock_Config+0x120>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <SystemClock_Config+0x124>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <SystemClock_Config+0x124>)
 8000e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <SystemClock_Config+0x124>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e78:	23d8      	movs	r3, #216	; 0xd8
 8000e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fd26 	bl	80028e0 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e9a:	f000 fad3 	bl	8001444 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e9e:	f001 fccf 	bl	8002840 <HAL_PWREx_EnableOverDrive>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ea8:	f000 facc 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ece:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 ffa7 	bl	8002e28 <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000ee0:	f000 fab0 	bl	8001444 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8000ee4:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8000ee8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 f98e 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000f02:	f000 fa9f 	bl	8001444 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	37d0      	adds	r7, #208	; 0xd0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_I2C1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <MX_I2C1_Init+0x7c>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f54:	f000 ff72 	bl	8001e3c <HAL_I2C_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 fa71 	bl	8001444 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f66:	f001 fbc3 	bl	80026f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f000 fa68 	bl	8001444 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f78:	f001 fc05 	bl	8002786 <HAL_I2CEx_ConfigDigitalFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 fa5f 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000ec 	.word	0x200000ec
 8000f90:	40005400 	.word	0x40005400
 8000f94:	20404768 	.word	0x20404768

08000f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fbe:	4a28      	ldr	r2, [pc, #160]	; (8001060 <MX_TIM3_Init+0xc8>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fc4:	226b      	movs	r2, #107	; 0x6b
 8000fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fe2:	481e      	ldr	r0, [pc, #120]	; (800105c <MX_TIM3_Init+0xc4>)
 8000fe4:	f002 fd06 	bl	80039f4 <HAL_TIM_PWM_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fee:	f000 fa29 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <MX_TIM3_Init+0xc4>)
 8001002:	f003 f9cb 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800100c:	f000 fa1a 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_TIM3_Init+0xc4>)
 8001028:	f002 fda2 	bl	8003b70 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001032:	f000 fa07 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	2204      	movs	r2, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <MX_TIM3_Init+0xc4>)
 800103e:	f002 fd97 	bl	8003b70 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001048:	f000 f9fc 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <MX_TIM3_Init+0xc4>)
 800104e:	f000 fac9 	bl	80015e4 <HAL_TIM_MspPostInit>

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000013c 	.word	0x2000013c
 8001060:	40000400 	.word	0x40000400

08001064 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2224      	movs	r2, #36	; 0x24
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fe88 	bl	8004d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_TIM4_Init+0xa4>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_TIM4_Init+0xa8>)
 8001086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_TIM4_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_TIM4_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_TIM4_Init+0xa4>)
 8001096:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800109a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_TIM4_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM4_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_TIM4_Init+0xa4>)
 80010d4:	f002 fcba 	bl	8003a4c <HAL_TIM_Encoder_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010de:	f000 f9b1 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_TIM4_Init+0xa4>)
 80010f0:	f003 f954 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010fa:	f000 f9a3 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3730      	adds	r7, #48	; 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000002c 	.word	0x2000002c
 800110c:	40000800 	.word	0x40000800

08001110 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART3_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART3_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART3_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART3_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART3_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART3_UART_Init+0x58>)
 8001154:	f003 f9b0 	bl	80044b8 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f971 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000006c 	.word	0x2000006c
 800116c:	40004800 	.word	0x40004800

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <MX_GPIO_Init+0x1f0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a75      	ldr	r2, [pc, #468]	; (8001360 <MX_GPIO_Init+0x1f0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <MX_GPIO_Init+0x1f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a6f      	ldr	r2, [pc, #444]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a69      	ldr	r2, [pc, #420]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b64      	ldr	r3, [pc, #400]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a63      	ldr	r2, [pc, #396]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b61      	ldr	r3, [pc, #388]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b5e      	ldr	r3, [pc, #376]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a5d      	ldr	r2, [pc, #372]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <MX_GPIO_Init+0x1f0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <MX_GPIO_Init+0x1f0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a57      	ldr	r2, [pc, #348]	; (8001360 <MX_GPIO_Init+0x1f0>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <MX_GPIO_Init+0x1f0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f244 0181 	movw	r1, #16513	; 0x4081
 800121c:	4851      	ldr	r0, [pc, #324]	; (8001364 <MX_GPIO_Init+0x1f4>)
 800121e:	f000 fdf3 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	4850      	ldr	r0, [pc, #320]	; (8001368 <MX_GPIO_Init+0x1f8>)
 8001228:	f000 fdee 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_GPIO_Init+0x1fc>)
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	484b      	ldr	r0, [pc, #300]	; (8001370 <MX_GPIO_Init+0x200>)
 8001242:	f000 fc37 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001246:	2332      	movs	r3, #50	; 0x32
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001256:	230b      	movs	r3, #11
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4843      	ldr	r0, [pc, #268]	; (8001370 <MX_GPIO_Init+0x200>)
 8001262:	f000 fc27 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001266:	2386      	movs	r3, #134	; 0x86
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001276:	230b      	movs	r3, #11
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	483c      	ldr	r0, [pc, #240]	; (8001374 <MX_GPIO_Init+0x204>)
 8001282:	f000 fc17 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001286:	f244 0381 	movw	r3, #16513	; 0x4081
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80012a0:	f000 fc08 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b6:	230b      	movs	r3, #11
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4828      	ldr	r0, [pc, #160]	; (8001364 <MX_GPIO_Init+0x1f4>)
 80012c2:	f000 fbf7 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4822      	ldr	r0, [pc, #136]	; (8001368 <MX_GPIO_Init+0x1f8>)
 80012de:	f000 fbe9 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	481c      	ldr	r0, [pc, #112]	; (8001368 <MX_GPIO_Init+0x1f8>)
 80012f6:	f000 fbdd 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012fa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800130c:	230a      	movs	r3, #10
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <MX_GPIO_Init+0x204>)
 8001318:	f000 fbcc 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_GPIO_Init+0x204>)
 8001332:	f000 fbbf 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001336:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001348:	230b      	movs	r3, #11
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0x1f8>)
 8001354:	f000 fbae 	bl	8001ab4 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	; 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400
 8001368:	40021800 	.word	0x40021800
 800136c:	10110000 	.word	0x10110000
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000

08001378 <BH1750_init>:

/* USER CODE BEGIN 4 */

void BH1750_init(I2C_HandleTypeDef hi2c1,uint8_t command,HAL_StatusTypeDef BH1750_Status)
{
 8001378:	b084      	sub	sp, #16
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af02      	add	r7, sp, #8
 8001380:	f107 0c08 	add.w	ip, r7, #8
 8001384:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command = BH1750_POWER_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	BH1750_Status = HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS_L, &command , 1, 100);
 800138e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2301      	movs	r3, #1
 8001398:	2146      	movs	r1, #70	; 0x46
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	f000 fddd 	bl	8001f5c <HAL_I2C_Master_Transmit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	command = BH1750_CONTINOUS_H_RES_MODE;
 80013a8:	2310      	movs	r3, #16
 80013aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	BH1750_Status = HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS_L, &command , 1, 100);
 80013ae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2146      	movs	r1, #70	; 0x46
 80013ba:	f107 0008 	add.w	r0, r7, #8
 80013be:	f000 fdcd 	bl	8001f5c <HAL_I2C_Master_Transmit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d0:	b004      	add	sp, #16
 80013d2:	4770      	bx	lr

080013d4 <BH1750_read>:
float BH1750_read(HAL_StatusTypeDef BH1750_Status, I2C_HandleTypeDef hi2c1, uint8_t data[2])
{
 80013d4:	b084      	sub	sp, #16
 80013d6:	b590      	push	{r4, r7, lr}
 80013d8:	b085      	sub	sp, #20
 80013da:	af02      	add	r7, sp, #8
 80013dc:	4604      	mov	r4, r0
 80013de:	f107 001c 	add.w	r0, r7, #28
 80013e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013e6:	4623      	mov	r3, r4
 80013e8:	71fb      	strb	r3, [r7, #7]
	BH1750_Status = HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDRESS_L, data, 2, 100);
 80013ea:	f107 001c 	add.w	r0, r7, #28
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2302      	movs	r3, #2
 80013f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013f6:	2146      	movs	r1, #70	; 0x46
 80013f8:	f000 fea4 	bl	8002144 <HAL_I2C_Master_Receive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
	return ((data[0] << 8) | data[1]) / 1.2;
 8001400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001408:	3201      	adds	r2, #1
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4313      	orrs	r3, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f84c 	bl	80004ac <__aeabi_i2d>
 8001414:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <BH1750_read+0x6c>)
 800141a:	f7ff f9db 	bl	80007d4 <__aeabi_ddiv>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	4618      	mov	r0, r3
 8001424:	4621      	mov	r1, r4
 8001426:	f7ff fabd 	bl	80009a4 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800143c:	b004      	add	sp, #16
 800143e:	4770      	bx	lr
 8001440:	3ff33333 	.word	0x3ff33333

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144a:	e7fe      	b.n	800144a <Error_Handler+0x6>

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_MspInit+0x44>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_MspInit+0x44>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x44>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x44>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x44>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_I2C_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_I2C_MspInit+0x84>)
 80014ec:	f000 fae2 	bl	8001ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_I2C_MspInit+0x80>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40005400 	.word	0x40005400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_TIM_PWM_MspInit+0x38>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10b      	bne.n	8001546 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000400 	.word	0x40000400
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d128      	bne.n	80015d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015c0:	2302      	movs	r3, #2
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80015cc:	f000 fa72 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40000800 	.word	0x40000800
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_TIM_MspPostInit+0x9c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d137      	bne.n	8001676 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_TIM_MspPostInit+0xa0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001646:	2302      	movs	r3, #2
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <HAL_TIM_MspPostInit+0xa4>)
 8001652:	f000 fa2f 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001666:	2302      	movs	r3, #2
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <HAL_TIM_MspPostInit+0xa8>)
 8001672:	f000 fa1f 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40000400 	.word	0x40000400
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x7c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d128      	bne.n	8001704 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_UART_MspInit+0x80>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f4:	2307      	movs	r3, #7
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0x84>)
 8001700:	f000 f9d8 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40004800 	.word	0x40004800
 8001710:	40023800 	.word	0x40023800
 8001714:	40020c00 	.word	0x40020c00

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f87e 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <SystemInit+0x28>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <SystemInit+0x28>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SystemInit+0x28>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001786:	609a      	str	r2, [r3, #8]
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800179c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800179e:	e003      	b.n	80017a8 <LoopCopyDataInit>

080017a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017a6:	3104      	adds	r1, #4

080017a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b0:	d3f6      	bcc.n	80017a0 <CopyDataInit>
  ldr  r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017b4:	e002      	b.n	80017bc <LoopFillZerobss>

080017b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017b8:	f842 3b04 	str.w	r3, [r2], #4

080017bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c0:	d3f9      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd3 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f003 fabb 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fabb 	bl	8000d44 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80017d4:	08004dd8 	.word	0x08004dd8
  ldr  r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017dc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80017e0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80017e4:	20000188 	.word	0x20000188

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>

080017ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f92c 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f805 	bl	8001804 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fe27 	bl	800144c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f939 	bl	8001a9a <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f90f 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000004 	.word	0x20000004
 800185c:	2000000c 	.word	0x2000000c
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000000c 	.word	0x2000000c
 8001888:	20000184 	.word	0x20000184

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000184 	.word	0x20000184

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_Delay+0x40>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000000c 	.word	0x2000000c

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	4313      	orrs	r3, r2
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	05fa0000 	.word	0x05fa0000

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff47 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff5c 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffb0 	bl	8001a08 <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e175      	b.n	8001dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8164 	bne.w	8001dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d00b      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b06:	2b11      	cmp	r3, #17
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x100>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d123      	bne.n	8001bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	08da      	lsrs	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80be 	beq.w	8001dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c56:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d037      	beq.n	8001cf2 <HAL_GPIO_Init+0x23e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a56      	ldr	r2, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_GPIO_Init+0x23a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a55      	ldr	r2, [pc, #340]	; (8001de4 <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02b      	beq.n	8001cea <HAL_GPIO_Init+0x236>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_GPIO_Init+0x334>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x232>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x22e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_GPIO_Init+0x33c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x22a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x340>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x344>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4f      	ldr	r2, [pc, #316]	; (8001dfc <HAL_GPIO_Init+0x348>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <HAL_GPIO_Init+0x34c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x21a>
 8001cca:	2309      	movs	r3, #9
 8001ccc:	e012      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cce:	230a      	movs	r3, #10
 8001cd0:	e010      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	e00e      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d04:	4934      	ldr	r1, [pc, #208]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d36:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f ae86 	bls.w	8001ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3724      	adds	r7, #36	; 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40021c00 	.word	0x40021c00
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40022400 	.word	0x40022400
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fb16 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d104      	bne.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_I2C_Init+0x11c>)
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	ea42 0103 	orr.w	r1, r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	021a      	lsls	r2, r3, #8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d9      	ldr	r1, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	02008000 	.word	0x02008000

08001f5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	f040 80da 	bne.w	8002132 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x30>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0d3      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f94:	f7ff fc7a 	bl	800188c <HAL_GetTick>
 8001f98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2319      	movs	r3, #25
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f9e6 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0be      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2221      	movs	r2, #33	; 0x21
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	893a      	ldrh	r2, [r7, #8]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2bff      	cmp	r3, #255	; 0xff
 8001fe6:	d90e      	bls.n	8002006 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	8979      	ldrh	r1, [r7, #10]
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <HAL_I2C_Master_Transmit+0x1e0>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fb48 	bl	8002694 <I2C_TransferConfig>
 8002004:	e06c      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_I2C_Master_Transmit+0x1e0>)
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fb37 	bl	8002694 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002026:	e05b      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	6a39      	ldr	r1, [r7, #32]
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f9e3 	bl	80023f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07b      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d034      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x184>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d130      	bne.n	80020e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f975 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04d      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d90e      	bls.n	80020c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8979      	ldrh	r1, [r7, #10]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 faeb 	bl	8002694 <I2C_TransferConfig>
 80020be:	e00f      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fada 	bl	8002694 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d19e      	bne.n	8002028 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f9c2 	bl	8002478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e01a      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_I2C_Master_Transmit+0x1e4>)
 8002112:	400b      	ands	r3, r1
 8002114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	80002000 	.word	0x80002000
 8002140:	fe00e800 	.word	0xfe00e800

08002144 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	f040 80db 	bne.w	800231c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2C_Master_Receive+0x30>
 8002170:	2302      	movs	r3, #2
 8002172:	e0d4      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800217c:	f7ff fb86 	bl	800188c <HAL_GetTick>
 8002180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2319      	movs	r3, #25
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8f2 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0bf      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2222      	movs	r2, #34	; 0x22
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2210      	movs	r2, #16
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2bff      	cmp	r3, #255	; 0xff
 80021ce:	d90e      	bls.n	80021ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	4b52      	ldr	r3, [pc, #328]	; (8002328 <HAL_I2C_Master_Receive+0x1e4>)
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa54 	bl	8002694 <I2C_TransferConfig>
 80021ec:	e06d      	b.n	80022ca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_I2C_Master_Receive+0x1e4>)
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa43 	bl	8002694 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800220e:	e05c      	b.n	80022ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	6a39      	ldr	r1, [r7, #32]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f96b 	bl	80024f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e07c      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d034      	beq.n	80022ca <HAL_I2C_Master_Receive+0x186>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d130      	bne.n	80022ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	2200      	movs	r2, #0
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f880 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e04d      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2bff      	cmp	r3, #255	; 0xff
 800228a:	d90e      	bls.n	80022aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	22ff      	movs	r2, #255	; 0xff
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	b2da      	uxtb	r2, r3
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	2300      	movs	r3, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f9f6 	bl	8002694 <I2C_TransferConfig>
 80022a8:	e00f      	b.n	80022ca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	8979      	ldrh	r1, [r7, #10]
 80022bc:	2300      	movs	r3, #0
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f9e5 	bl	8002694 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d19d      	bne.n	8002210 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6a39      	ldr	r1, [r7, #32]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8cd 	bl	8002478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01a      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2220      	movs	r2, #32
 80022ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_I2C_Master_Receive+0x1e8>)
 80022fc:	400b      	ands	r3, r1
 80022fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	80002400 	.word	0x80002400
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d103      	bne.n	800234e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	619a      	str	r2, [r3, #24]
  }
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	e022      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d01e      	beq.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002392:	f7ff fa7b 	bl	800188c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d113      	bne.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00f      	b.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d0cd      	beq.n	800238a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002404:	e02c      	b.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f8dc 	bl	80025c8 <I2C_IsAcknowledgeFailed>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02a      	b.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d01e      	beq.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff fa33 	bl	800188c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e007      	b.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d1cb      	bne.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002484:	e028      	b.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f89c 	bl	80025c8 <I2C_IsAcknowledgeFailed>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e026      	b.n	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7ff f9f7 	bl	800188c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d1cf      	bne.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024fc:	e055      	b.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f860 	bl	80025c8 <I2C_IsAcknowledgeFailed>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e053      	b.n	80025ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b20      	cmp	r3, #32
 800251e:	d129      	bne.n	8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d105      	bne.n	800253a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e03f      	b.n	80025ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800254e:	400b      	ands	r3, r1
 8002550:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e022      	b.n	80025ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002574:	f7ff f98a 	bl	800188c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e007      	b.n	80025ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d1a2      	bne.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	fe00e800 	.word	0xfe00e800

080025c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d151      	bne.n	8002686 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e2:	e022      	b.n	800262a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d01e      	beq.n	800262a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	f7ff f94e 	bl	800188c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d302      	bcc.n	8002602 <I2C_IsAcknowledgeFailed+0x3a>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e02e      	b.n	8002688 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d1d5      	bne.n	80025e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2210      	movs	r2, #16
 800263e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2220      	movs	r2, #32
 8002646:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff fe71 	bl	8002330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <I2C_IsAcknowledgeFailed+0xc8>)
 800265a:	400b      	ands	r3, r1
 800265c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	fe00e800 	.word	0xfe00e800

08002694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	4613      	mov	r3, r2
 80026a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	0d5b      	lsrs	r3, r3, #21
 80026b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <I2C_TransferConfig+0x58>)
 80026b6:	430b      	orrs	r3, r1
 80026b8:	43db      	mvns	r3, r3
 80026ba:	ea02 0103 	and.w	r1, r2, r3
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c4:	7a7b      	ldrb	r3, [r7, #9]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	03ff63ff 	.word	0x03ff63ff

080026f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	d138      	bne.n	8002778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002710:	2302      	movs	r3, #2
 8002712:	e032      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b20      	cmp	r3, #32
 800279a:	d139      	bne.n	8002810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e033      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2224      	movs	r2, #36	; 0x24
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40007000 	.word	0x40007000

08002840 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800286e:	f7ff f80d 	bl	800188c <HAL_GetTick>
 8002872:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002874:	e009      	b.n	800288a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002876:	f7ff f809 	bl	800188c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002884:	d901      	bls.n	800288a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e022      	b.n	80028d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002896:	d1ee      	bne.n	8002876 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800289e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a4:	f7fe fff2 	bl	800188c <HAL_GetTick>
 80028a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028aa:	e009      	b.n	80028c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028ac:	f7fe ffee 	bl	800188c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ba:	d901      	bls.n	80028c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e007      	b.n	80028d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028cc:	d1ee      	bne.n	80028ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e291      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8087 	beq.w	8002a12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	4b96      	ldr	r3, [pc, #600]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b04      	cmp	r3, #4
 800290e:	d00c      	beq.n	800292a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002910:	4b93      	ldr	r3, [pc, #588]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d112      	bne.n	8002942 <HAL_RCC_OscConfig+0x62>
 800291c:	4b90      	ldr	r3, [pc, #576]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002928:	d10b      	bne.n	8002942 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292a:	4b8d      	ldr	r3, [pc, #564]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d06c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x130>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d168      	bne.n	8002a10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e26b      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x7a>
 800294c:	4b84      	ldr	r3, [pc, #528]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a83      	ldr	r2, [pc, #524]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	e02e      	b.n	80029b8 <HAL_RCC_OscConfig+0xd8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x9c>
 8002962:	4b7f      	ldr	r3, [pc, #508]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7e      	ldr	r2, [pc, #504]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b7c      	ldr	r3, [pc, #496]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7b      	ldr	r2, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xd8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0xc0>
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xd8>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6b      	ldr	r2, [pc, #428]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe ff64 	bl	800188c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe ff60 	bl	800188c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e21f      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe8>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe ff50 	bl	800188c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe ff4c 	bl	800188c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e20b      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x110>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d069      	beq.n	8002af2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x190>
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1df      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	493d      	ldr	r1, [pc, #244]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e040      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff02 	bl	800188c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fefe 	bl	800188c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1bd      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4929      	ldr	r1, [pc, #164]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
 8002abe:	e018      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fede 	bl	800188c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe feda 	bl	800188c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e199      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d038      	beq.n	8002b70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d019      	beq.n	8002b3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe febb 	bl	800188c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe feb7 	bl	800188c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e176      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x23a>
 8002b38:	e01a      	b.n	8002b70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_RCC_OscConfig+0x280>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fea1 	bl	800188c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fe9d 	bl	800188c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d903      	bls.n	8002b64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e15c      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
 8002b60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b91      	ldr	r3, [pc, #580]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a4 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10d      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a87      	ldr	r2, [pc, #540]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b85      	ldr	r3, [pc, #532]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba6:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bb2:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7e      	ldr	r2, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fe65 	bl	800188c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7fe fe61 	bl	800188c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b64      	cmp	r3, #100	; 0x64
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e120      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <HAL_RCC_OscConfig+0x4d0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x31a>
 8002bec:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e02d      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x33c>
 8002c02:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a69      	ldr	r2, [pc, #420]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b67      	ldr	r3, [pc, #412]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a66      	ldr	r2, [pc, #408]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e01c      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d10c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x35e>
 8002c24:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	e00b      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a57      	ldr	r2, [pc, #348]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d015      	beq.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe15 	bl	800188c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fe11 	bl	800188c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0ce      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ee      	beq.n	8002c66 <HAL_RCC_OscConfig+0x386>
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fdff 	bl	800188c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fdfb 	bl	800188c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a4 	beq.w	8002e18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d06b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d149      	bne.n	8002d78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fdcc 	bl	800188c <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fdc8 	bl	800188c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e087      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd9c 	bl	800188c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fd98 	bl	800188c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e057      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x478>
 8002d76:	e04f      	b.n	8002e18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fd82 	bl	800188c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fd7e 	bl	800188c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03d      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4ac>
 8002daa:	e035      	b.n	8002e18 <HAL_RCC_OscConfig+0x538>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x544>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d121      	bne.n	8002e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d0      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	4965      	ldr	r1, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d040      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d115      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e073      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4936      	ldr	r1, [pc, #216]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fcb6 	bl	800188c <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe fcb2 	bl	800188c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e053      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d210      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1d4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fc12 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08004db0 	.word	0x08004db0
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	20000008 	.word	0x20000008

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	2300      	movs	r3, #0
 8003010:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b04      	cmp	r3, #4
 8003020:	d007      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x32>
 8003022:	2b08      	cmp	r3, #8
 8003024:	d008      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x38>
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 80b4 	bne.w	8003194 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800302e:	60bb      	str	r3, [r7, #8]
      break;
 8003030:	e0b3      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003032:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003034:	60bb      	str	r3, [r7, #8]
      break;
 8003036:	e0b0      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003040:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003042:	4b58      	ldr	r3, [pc, #352]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d04a      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	f240 11ff 	movw	r1, #511	; 0x1ff
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	ea03 0501 	and.w	r5, r3, r1
 8003064:	ea04 0602 	and.w	r6, r4, r2
 8003068:	4629      	mov	r1, r5
 800306a:	4632      	mov	r2, r6
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	0154      	lsls	r4, r2, #5
 8003076:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800307a:	014b      	lsls	r3, r1, #5
 800307c:	4619      	mov	r1, r3
 800307e:	4622      	mov	r2, r4
 8003080:	1b49      	subs	r1, r1, r5
 8003082:	eb62 0206 	sbc.w	r2, r2, r6
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	0194      	lsls	r4, r2, #6
 8003090:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003094:	018b      	lsls	r3, r1, #6
 8003096:	1a5b      	subs	r3, r3, r1
 8003098:	eb64 0402 	sbc.w	r4, r4, r2
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	00e2      	lsls	r2, r4, #3
 80030a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030aa:	00d9      	lsls	r1, r3, #3
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	195b      	adds	r3, r3, r5
 80030b2:	eb44 0406 	adc.w	r4, r4, r6
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	0262      	lsls	r2, r4, #9
 80030c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030c4:	0259      	lsls	r1, r3, #9
 80030c6:	460b      	mov	r3, r1
 80030c8:	4614      	mov	r4, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	4621      	mov	r1, r4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	f7fd fcb4 	bl	8000a44 <__aeabi_uldivmod>
 80030dc:	4603      	mov	r3, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e049      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	ea03 0501 	and.w	r5, r3, r1
 80030fa:	ea04 0602 	and.w	r6, r4, r2
 80030fe:	4629      	mov	r1, r5
 8003100:	4632      	mov	r2, r6
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	0154      	lsls	r4, r2, #5
 800310c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003110:	014b      	lsls	r3, r1, #5
 8003112:	4619      	mov	r1, r3
 8003114:	4622      	mov	r2, r4
 8003116:	1b49      	subs	r1, r1, r5
 8003118:	eb62 0206 	sbc.w	r2, r2, r6
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	f04f 0400 	mov.w	r4, #0
 8003124:	0194      	lsls	r4, r2, #6
 8003126:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800312a:	018b      	lsls	r3, r1, #6
 800312c:	1a5b      	subs	r3, r3, r1
 800312e:	eb64 0402 	sbc.w	r4, r4, r2
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003140:	00d9      	lsls	r1, r3, #3
 8003142:	460b      	mov	r3, r1
 8003144:	4614      	mov	r4, r2
 8003146:	195b      	adds	r3, r3, r5
 8003148:	eb44 0406 	adc.w	r4, r4, r6
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	02a2      	lsls	r2, r4, #10
 8003156:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800315a:	0299      	lsls	r1, r3, #10
 800315c:	460b      	mov	r3, r1
 800315e:	4614      	mov	r4, r2
 8003160:	4618      	mov	r0, r3
 8003162:	4621      	mov	r1, r4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f04f 0400 	mov.w	r4, #0
 800316a:	461a      	mov	r2, r3
 800316c:	4623      	mov	r3, r4
 800316e:	f7fd fc69 	bl	8000a44 <__aeabi_uldivmod>
 8003172:	4603      	mov	r3, r0
 8003174:	460c      	mov	r4, r1
 8003176:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	60bb      	str	r3, [r7, #8]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003196:	60bb      	str	r3, [r7, #8]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	68bb      	ldr	r3, [r7, #8]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff0 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031d0:	4601      	mov	r1, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08004dc0 	.word	0x08004dc0

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffdc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031f8:	4601      	mov	r1, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	08004dc0 	.word	0x08004dc0

08003218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	4964      	ldr	r1, [pc, #400]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	4959      	ldr	r1, [pc, #356]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	494a      	ldr	r1, [pc, #296]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 808b 	beq.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a39      	ldr	r2, [pc, #228]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe fab4 	bl	800188c <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003328:	f7fe fab0 	bl	800188c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e355      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d035      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d02e      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d114      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fa78 	bl	800188c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fa74 	bl	800188c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e317      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ee      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ce:	d111      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033de:	400b      	ands	r3, r1
 80033e0:	4901      	ldr	r1, [pc, #4]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40007000 	.word	0x40007000
 80033f0:	0ffffcff 	.word	0x0ffffcff
 80033f4:	4bb0      	ldr	r3, [pc, #704]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4aaf      	ldr	r2, [pc, #700]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033fe:	6093      	str	r3, [r2, #8]
 8003400:	4bad      	ldr	r3, [pc, #692]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003402:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	49aa      	ldr	r1, [pc, #680]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800341e:	4ba6      	ldr	r3, [pc, #664]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	4aa4      	ldr	r2, [pc, #656]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800342e:	4ba2      	ldr	r3, [pc, #648]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003430:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	499f      	ldr	r1, [pc, #636]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344c:	4b9a      	ldr	r3, [pc, #616]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345a:	4997      	ldr	r1, [pc, #604]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800346e:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	498e      	ldr	r1, [pc, #568]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003490:	4b89      	ldr	r3, [pc, #548]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	4986      	ldr	r1, [pc, #536]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b2:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	497d      	ldr	r1, [pc, #500]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4975      	ldr	r1, [pc, #468]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f023 020c 	bic.w	r2, r3, #12
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	496c      	ldr	r1, [pc, #432]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003518:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4964      	ldr	r1, [pc, #400]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800353a:	4b5f      	ldr	r3, [pc, #380]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	495b      	ldr	r1, [pc, #364]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4953      	ldr	r1, [pc, #332]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800357e:	4b4e      	ldr	r3, [pc, #312]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	494a      	ldr	r1, [pc, #296]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	4942      	ldr	r1, [pc, #264]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	4939      	ldr	r1, [pc, #228]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f2:	4931      	ldr	r1, [pc, #196]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d011      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	4928      	ldr	r1, [pc, #160]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	4918      	ldr	r1, [pc, #96]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003678:	490f      	ldr	r1, [pc, #60]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d005      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368e:	f040 80d8 	bne.w	8003842 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369e:	f7fe f8f5 	bl	800188c <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036a6:	f7fe f8f1 	bl	800188c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d903      	bls.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e196      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80036b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036bc:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d021      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036dc:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f0:	0e1b      	lsrs	r3, r3, #24
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	019a      	lsls	r2, r3, #6
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	4957      	ldr	r1, [pc, #348]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003742:	d129      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003758:	0f1b      	lsrs	r3, r3, #28
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	019a      	lsls	r2, r3, #6
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	431a      	orrs	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	071b      	lsls	r3, r3, #28
 8003778:	493d      	ldr	r1, [pc, #244]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003780:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003786:	f023 021f 	bic.w	r2, r3, #31
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	3b01      	subs	r3, #1
 8003790:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01d      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	0e1b      	lsrs	r3, r3, #24
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b8:	0f1b      	lsrs	r3, r3, #28
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	019a      	lsls	r2, r3, #6
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	071b      	lsls	r3, r3, #28
 80037d8:	4925      	ldr	r1, [pc, #148]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	019a      	lsls	r2, r3, #6
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4919      	ldr	r1, [pc, #100]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fe f836 	bl	800188c <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003824:	f7fe f832 	bl	800188c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0d7      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 80cd 	bne.w	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003856:	f7fe f819 	bl	800188c <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800385e:	f7fe f815 	bl	800188c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d903      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0ba      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003880:	d0ed      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02e      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d12a      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038aa:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038b8:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	0f1b      	lsrs	r3, r3, #28
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	019a      	lsls	r2, r3, #6
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	4944      	ldr	r1, [pc, #272]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	493d      	ldr	r1, [pc, #244]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d022      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003914:	d11d      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003924:	4b32      	ldr	r3, [pc, #200]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	0f1b      	lsrs	r3, r3, #28
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	019a      	lsls	r2, r3, #6
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	071b      	lsls	r3, r3, #28
 800394a:	4929      	ldr	r1, [pc, #164]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d028      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	0e1b      	lsrs	r3, r3, #24
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	019a      	lsls	r2, r3, #6
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	071b      	lsls	r3, r3, #28
 8003992:	4917      	ldr	r1, [pc, #92]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800399c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4911      	ldr	r1, [pc, #68]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd ff66 	bl	800188c <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039c4:	f7fd ff62 	bl	800188c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e007      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e2:	d1ef      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01d      	b.n	8003a42 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fd7e 	bl	800151c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 f9b4 	bl	8003da0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e07b      	b.n	8003b58 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fd fd71 	bl	800155c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6899      	ldr	r1, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_TIM_Encoder_Init+0x114>)
 8003a8e:	400b      	ands	r3, r1
 8003a90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 f97f 	bl	8003da0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_TIM_Encoder_Init+0x118>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_TIM_Encoder_Init+0x11c>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_TIM_Encoder_Init+0x120>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4313      	orrs	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	011a      	lsls	r2, r3, #4
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	031b      	lsls	r3, r3, #12
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	fffebff8 	.word	0xfffebff8
 8003b64:	fffffcfc 	.word	0xfffffcfc
 8003b68:	fffff3f3 	.word	0xfffff3f3
 8003b6c:	ffff0f0f 	.word	0xffff0f0f

08003b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e105      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b14      	cmp	r3, #20
 8003b9e:	f200 80f0 	bhi.w	8003d82 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bfd 	.word	0x08003bfd
 8003bac:	08003d83 	.word	0x08003d83
 8003bb0:	08003d83 	.word	0x08003d83
 8003bb4:	08003d83 	.word	0x08003d83
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003d83 	.word	0x08003d83
 8003bc0:	08003d83 	.word	0x08003d83
 8003bc4:	08003d83 	.word	0x08003d83
 8003bc8:	08003c7f 	.word	0x08003c7f
 8003bcc:	08003d83 	.word	0x08003d83
 8003bd0:	08003d83 	.word	0x08003d83
 8003bd4:	08003d83 	.word	0x08003d83
 8003bd8:	08003cbf 	.word	0x08003cbf
 8003bdc:	08003d83 	.word	0x08003d83
 8003be0:	08003d83 	.word	0x08003d83
 8003be4:	08003d83 	.word	0x08003d83
 8003be8:	08003d01 	.word	0x08003d01
 8003bec:	08003d83 	.word	0x08003d83
 8003bf0:	08003d83 	.word	0x08003d83
 8003bf4:	08003d83 	.word	0x08003d83
 8003bf8:	08003d41 	.word	0x08003d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f96c 	bl	8003ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0208 	orr.w	r2, r2, #8
 8003c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6999      	ldr	r1, [r3, #24]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	619a      	str	r2, [r3, #24]
      break;
 8003c3a:	e0a3      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9be 	bl	8003fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6999      	ldr	r1, [r3, #24]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	021a      	lsls	r2, r3, #8
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	619a      	str	r2, [r3, #24]
      break;
 8003c7c:	e082      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa15 	bl	80040b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0208 	orr.w	r2, r2, #8
 8003c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0204 	bic.w	r2, r2, #4
 8003ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69d9      	ldr	r1, [r3, #28]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]
      break;
 8003cbc:	e062      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fa6b 	bl	80041a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69d9      	ldr	r1, [r3, #28]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	021a      	lsls	r2, r3, #8
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	61da      	str	r2, [r3, #28]
      break;
 8003cfe:	e041      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 faa2 	bl	8004250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d3e:	e021      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fad4 	bl	80042f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003d82:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a40      	ldr	r2, [pc, #256]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d00f      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02b      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d027      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d023      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01f      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01b      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d017      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <TIM_Base_SetConfig+0x128>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <TIM_Base_SetConfig+0x12c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00f      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <TIM_Base_SetConfig+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <TIM_Base_SetConfig+0x134>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a24      	ldr	r2, [pc, #144]	; (8003ed8 <TIM_Base_SetConfig+0x138>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a23      	ldr	r2, [pc, #140]	; (8003edc <TIM_Base_SetConfig+0x13c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40010400 	.word	0x40010400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800
 8003ed4:	40001800 	.word	0x40001800
 8003ed8:	40001c00 	.word	0x40001c00
 8003edc:	40002000 	.word	0x40002000

08003ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0201 	bic.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <TIM_OC1_SetConfig+0xd8>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0302 	bic.w	r3, r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_OC1_SetConfig+0xdc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_OC1_SetConfig+0x64>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <TIM_OC1_SetConfig+0xe0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10c      	bne.n	8003f5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0308 	bic.w	r3, r3, #8
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <TIM_OC1_SetConfig+0xdc>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_OC1_SetConfig+0x8e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <TIM_OC1_SetConfig+0xe0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d111      	bne.n	8003f92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	621a      	str	r2, [r3, #32]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	fffeff8f 	.word	0xfffeff8f
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0210 	bic.w	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <TIM_OC2_SetConfig+0xe4>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0320 	bic.w	r3, r3, #32
 800400e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a23      	ldr	r2, [pc, #140]	; (80040ac <TIM_OC2_SetConfig+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_OC2_SetConfig+0x68>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <TIM_OC2_SetConfig+0xec>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10d      	bne.n	8004048 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a18      	ldr	r2, [pc, #96]	; (80040ac <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC2_SetConfig+0x94>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <TIM_OC2_SetConfig+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d113      	bne.n	8004080 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	feff8fff 	.word	0xfeff8fff
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40010400 	.word	0x40010400

080040b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <TIM_OC3_SetConfig+0xe0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <TIM_OC3_SetConfig+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_OC3_SetConfig+0x66>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a21      	ldr	r2, [pc, #132]	; (800419c <TIM_OC3_SetConfig+0xe8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10d      	bne.n	8004136 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <TIM_OC3_SetConfig+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x92>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a16      	ldr	r2, [pc, #88]	; (800419c <TIM_OC3_SetConfig+0xe8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	fffeff8f 	.word	0xfffeff8f
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <TIM_OC4_SetConfig+0xa4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <TIM_OC4_SetConfig+0xa8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC4_SetConfig+0x68>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <TIM_OC4_SetConfig+0xac>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	feff8fff 	.word	0xfeff8fff
 8004248:	40010000 	.word	0x40010000
 800424c:	40010400 	.word	0x40010400

08004250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <TIM_OC5_SetConfig+0x98>)
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004290:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a12      	ldr	r2, [pc, #72]	; (80042ec <TIM_OC5_SetConfig+0x9c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC5_SetConfig+0x5e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <TIM_OC5_SetConfig+0xa0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d109      	bne.n	80042c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	fffeff8f 	.word	0xfffeff8f
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40010400 	.word	0x40010400

080042f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <TIM_OC6_SetConfig+0x9c>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	051b      	lsls	r3, r3, #20
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <TIM_OC6_SetConfig+0xa0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC6_SetConfig+0x60>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <TIM_OC6_SetConfig+0xa4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d109      	bne.n	8004368 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	feff8fff 	.word	0xfeff8fff
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e06d      	b.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a20      	ldr	r2, [pc, #128]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d01d      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10c      	bne.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40010000 	.word	0x40010000
 80044a0:	40010400 	.word	0x40010400
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40001800 	.word	0x40001800

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e040      	b.n	800454c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd f8d8 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f82c 	bl	8004554 <UART_SetConfig>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e022      	b.n	800454c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 faca 	bl	8004aa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fb51 	bl	8004bec <UART_CheckIdleState>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4bb1      	ldr	r3, [pc, #708]	; (8004848 <UART_SetConfig+0x2f4>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	6939      	ldr	r1, [r7, #16]
 800458c:	430b      	orrs	r3, r1
 800458e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a9f      	ldr	r2, [pc, #636]	; (800484c <UART_SetConfig+0x2f8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d121      	bne.n	8004618 <UART_SetConfig+0xc4>
 80045d4:	4b9e      	ldr	r3, [pc, #632]	; (8004850 <UART_SetConfig+0x2fc>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d816      	bhi.n	8004610 <UART_SetConfig+0xbc>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x94>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	08004605 	.word	0x08004605
 80045f0:	080045ff 	.word	0x080045ff
 80045f4:	0800460b 	.word	0x0800460b
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e151      	b.n	80048a2 <UART_SetConfig+0x34e>
 80045fe:	2302      	movs	r3, #2
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e14e      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004604:	2304      	movs	r3, #4
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e14b      	b.n	80048a2 <UART_SetConfig+0x34e>
 800460a:	2308      	movs	r3, #8
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e148      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004610:	2310      	movs	r3, #16
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	bf00      	nop
 8004616:	e144      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a8d      	ldr	r2, [pc, #564]	; (8004854 <UART_SetConfig+0x300>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d134      	bne.n	800468c <UART_SetConfig+0x138>
 8004622:	4b8b      	ldr	r3, [pc, #556]	; (8004850 <UART_SetConfig+0x2fc>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d829      	bhi.n	8004684 <UART_SetConfig+0x130>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0xe4>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004685 	.word	0x08004685
 8004640:	08004685 	.word	0x08004685
 8004644:	08004685 	.word	0x08004685
 8004648:	08004679 	.word	0x08004679
 800464c:	08004685 	.word	0x08004685
 8004650:	08004685 	.word	0x08004685
 8004654:	08004685 	.word	0x08004685
 8004658:	08004673 	.word	0x08004673
 800465c:	08004685 	.word	0x08004685
 8004660:	08004685 	.word	0x08004685
 8004664:	08004685 	.word	0x08004685
 8004668:	0800467f 	.word	0x0800467f
 800466c:	2300      	movs	r3, #0
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e117      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004672:	2302      	movs	r3, #2
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e114      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004678:	2304      	movs	r3, #4
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e111      	b.n	80048a2 <UART_SetConfig+0x34e>
 800467e:	2308      	movs	r3, #8
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e10e      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004684:	2310      	movs	r3, #16
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	bf00      	nop
 800468a:	e10a      	b.n	80048a2 <UART_SetConfig+0x34e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a71      	ldr	r2, [pc, #452]	; (8004858 <UART_SetConfig+0x304>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d120      	bne.n	80046d8 <UART_SetConfig+0x184>
 8004696:	4b6e      	ldr	r3, [pc, #440]	; (8004850 <UART_SetConfig+0x2fc>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d00f      	beq.n	80046c4 <UART_SetConfig+0x170>
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d802      	bhi.n	80046ae <UART_SetConfig+0x15a>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <UART_SetConfig+0x164>
 80046ac:	e010      	b.n	80046d0 <UART_SetConfig+0x17c>
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d005      	beq.n	80046be <UART_SetConfig+0x16a>
 80046b2:	2b30      	cmp	r3, #48	; 0x30
 80046b4:	d009      	beq.n	80046ca <UART_SetConfig+0x176>
 80046b6:	e00b      	b.n	80046d0 <UART_SetConfig+0x17c>
 80046b8:	2300      	movs	r3, #0
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e0f1      	b.n	80048a2 <UART_SetConfig+0x34e>
 80046be:	2302      	movs	r3, #2
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e0ee      	b.n	80048a2 <UART_SetConfig+0x34e>
 80046c4:	2304      	movs	r3, #4
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e0eb      	b.n	80048a2 <UART_SetConfig+0x34e>
 80046ca:	2308      	movs	r3, #8
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e0e8      	b.n	80048a2 <UART_SetConfig+0x34e>
 80046d0:	2310      	movs	r3, #16
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	bf00      	nop
 80046d6:	e0e4      	b.n	80048a2 <UART_SetConfig+0x34e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5f      	ldr	r2, [pc, #380]	; (800485c <UART_SetConfig+0x308>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d120      	bne.n	8004724 <UART_SetConfig+0x1d0>
 80046e2:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <UART_SetConfig+0x2fc>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d00f      	beq.n	8004710 <UART_SetConfig+0x1bc>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d802      	bhi.n	80046fa <UART_SetConfig+0x1a6>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <UART_SetConfig+0x1b0>
 80046f8:	e010      	b.n	800471c <UART_SetConfig+0x1c8>
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d005      	beq.n	800470a <UART_SetConfig+0x1b6>
 80046fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004700:	d009      	beq.n	8004716 <UART_SetConfig+0x1c2>
 8004702:	e00b      	b.n	800471c <UART_SetConfig+0x1c8>
 8004704:	2300      	movs	r3, #0
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e0cb      	b.n	80048a2 <UART_SetConfig+0x34e>
 800470a:	2302      	movs	r3, #2
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e0c8      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004710:	2304      	movs	r3, #4
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e0c5      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004716:	2308      	movs	r3, #8
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e0c2      	b.n	80048a2 <UART_SetConfig+0x34e>
 800471c:	2310      	movs	r3, #16
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	bf00      	nop
 8004722:	e0be      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a4d      	ldr	r2, [pc, #308]	; (8004860 <UART_SetConfig+0x30c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d124      	bne.n	8004778 <UART_SetConfig+0x224>
 800472e:	4b48      	ldr	r3, [pc, #288]	; (8004850 <UART_SetConfig+0x2fc>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d012      	beq.n	8004764 <UART_SetConfig+0x210>
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d802      	bhi.n	800474a <UART_SetConfig+0x1f6>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <UART_SetConfig+0x204>
 8004748:	e012      	b.n	8004770 <UART_SetConfig+0x21c>
 800474a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474e:	d006      	beq.n	800475e <UART_SetConfig+0x20a>
 8004750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004754:	d009      	beq.n	800476a <UART_SetConfig+0x216>
 8004756:	e00b      	b.n	8004770 <UART_SetConfig+0x21c>
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0a1      	b.n	80048a2 <UART_SetConfig+0x34e>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e09e      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e09b      	b.n	80048a2 <UART_SetConfig+0x34e>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e098      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	bf00      	nop
 8004776:	e094      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a39      	ldr	r2, [pc, #228]	; (8004864 <UART_SetConfig+0x310>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d124      	bne.n	80047cc <UART_SetConfig+0x278>
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <UART_SetConfig+0x2fc>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004790:	d012      	beq.n	80047b8 <UART_SetConfig+0x264>
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d802      	bhi.n	800479e <UART_SetConfig+0x24a>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <UART_SetConfig+0x258>
 800479c:	e012      	b.n	80047c4 <UART_SetConfig+0x270>
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d006      	beq.n	80047b2 <UART_SetConfig+0x25e>
 80047a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a8:	d009      	beq.n	80047be <UART_SetConfig+0x26a>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x270>
 80047ac:	2301      	movs	r3, #1
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e077      	b.n	80048a2 <UART_SetConfig+0x34e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e074      	b.n	80048a2 <UART_SetConfig+0x34e>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e071      	b.n	80048a2 <UART_SetConfig+0x34e>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e06e      	b.n	80048a2 <UART_SetConfig+0x34e>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	bf00      	nop
 80047ca:	e06a      	b.n	80048a2 <UART_SetConfig+0x34e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a25      	ldr	r2, [pc, #148]	; (8004868 <UART_SetConfig+0x314>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d124      	bne.n	8004820 <UART_SetConfig+0x2cc>
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <UART_SetConfig+0x2fc>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d012      	beq.n	800480c <UART_SetConfig+0x2b8>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	d802      	bhi.n	80047f2 <UART_SetConfig+0x29e>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <UART_SetConfig+0x2ac>
 80047f0:	e012      	b.n	8004818 <UART_SetConfig+0x2c4>
 80047f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f6:	d006      	beq.n	8004806 <UART_SetConfig+0x2b2>
 80047f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047fc:	d009      	beq.n	8004812 <UART_SetConfig+0x2be>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x2c4>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e04d      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e04a      	b.n	80048a2 <UART_SetConfig+0x34e>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e047      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e044      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	bf00      	nop
 800481e:	e040      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <UART_SetConfig+0x318>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d139      	bne.n	800489e <UART_SetConfig+0x34a>
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <UART_SetConfig+0x2fc>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004838:	d027      	beq.n	800488a <UART_SetConfig+0x336>
 800483a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800483e:	d817      	bhi.n	8004870 <UART_SetConfig+0x31c>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <UART_SetConfig+0x32a>
 8004844:	e027      	b.n	8004896 <UART_SetConfig+0x342>
 8004846:	bf00      	nop
 8004848:	efff69f3 	.word	0xefff69f3
 800484c:	40011000 	.word	0x40011000
 8004850:	40023800 	.word	0x40023800
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	40004c00 	.word	0x40004c00
 8004860:	40005000 	.word	0x40005000
 8004864:	40011400 	.word	0x40011400
 8004868:	40007800 	.word	0x40007800
 800486c:	40007c00 	.word	0x40007c00
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d006      	beq.n	8004884 <UART_SetConfig+0x330>
 8004876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800487a:	d009      	beq.n	8004890 <UART_SetConfig+0x33c>
 800487c:	e00b      	b.n	8004896 <UART_SetConfig+0x342>
 800487e:	2300      	movs	r3, #0
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e00e      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004884:	2302      	movs	r3, #2
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e00b      	b.n	80048a2 <UART_SetConfig+0x34e>
 800488a:	2304      	movs	r3, #4
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e008      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004890:	2308      	movs	r3, #8
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e005      	b.n	80048a2 <UART_SetConfig+0x34e>
 8004896:	2310      	movs	r3, #16
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	bf00      	nop
 800489c:	e001      	b.n	80048a2 <UART_SetConfig+0x34e>
 800489e:	2310      	movs	r3, #16
 80048a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048aa:	d17f      	bne.n	80049ac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d85c      	bhi.n	800496c <UART_SetConfig+0x418>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x364>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	0800491d 	.word	0x0800491d
 80048c4:	0800496d 	.word	0x0800496d
 80048c8:	08004935 	.word	0x08004935
 80048cc:	0800496d 	.word	0x0800496d
 80048d0:	0800496d 	.word	0x0800496d
 80048d4:	0800496d 	.word	0x0800496d
 80048d8:	08004955 	.word	0x08004955
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe fc74 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80048e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	005a      	lsls	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	61bb      	str	r3, [r7, #24]
        break;
 80048fa:	e03a      	b.n	8004972 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe fc78 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004900:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	005a      	lsls	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	61bb      	str	r3, [r7, #24]
        break;
 800491a:	e02a      	b.n	8004972 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	085a      	lsrs	r2, r3, #1
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <UART_SetConfig+0x54c>)
 8004924:	4413      	add	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	fbb3 f3f2 	udiv	r3, r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	61bb      	str	r3, [r7, #24]
        break;
 8004932:	e01e      	b.n	8004972 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004934:	f7fe fb64 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8004938:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	005a      	lsls	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	b29b      	uxth	r3, r3
 8004950:	61bb      	str	r3, [r7, #24]
        break;
 8004952:	e00e      	b.n	8004972 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	61bb      	str	r3, [r7, #24]
        break;
 800496a:	e002      	b.n	8004972 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
        break;
 8004970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b0f      	cmp	r3, #15
 8004976:	d916      	bls.n	80049a6 <UART_SetConfig+0x452>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d212      	bcs.n	80049a6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f023 030f 	bic.w	r3, r3, #15
 8004988:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	b29a      	uxth	r2, r3
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	4313      	orrs	r3, r2
 800499a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	897a      	ldrh	r2, [r7, #10]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e070      	b.n	8004a88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
 80049aa:	e06d      	b.n	8004a88 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80049ac:	7ffb      	ldrb	r3, [r7, #31]
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d859      	bhi.n	8004a66 <UART_SetConfig+0x512>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x464>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	08004a19 	.word	0x08004a19
 80049c4:	08004a67 	.word	0x08004a67
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004a67 	.word	0x08004a67
 80049d8:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fbf4 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80049e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	085a      	lsrs	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	441a      	add	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	61bb      	str	r3, [r7, #24]
        break;
 80049f8:	e038      	b.n	8004a6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fa:	f7fe fbf9 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80049fe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	085a      	lsrs	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	61bb      	str	r3, [r7, #24]
        break;
 8004a16:	e029      	b.n	8004a6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	085a      	lsrs	r2, r3, #1
 8004a1e:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <UART_SetConfig+0x550>)
 8004a20:	4413      	add	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6852      	ldr	r2, [r2, #4]
 8004a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
        break;
 8004a2e:	e01d      	b.n	8004a6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a30:	f7fe fae6 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8004a34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085a      	lsrs	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	441a      	add	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
        break;
 8004a4c:	e00e      	b.n	8004a6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
        break;
 8004a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0x530>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	01e84800 	.word	0x01e84800
 8004aa4:	00f42400 	.word	0x00f42400

08004aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01a      	beq.n	8004bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba6:	d10a      	bne.n	8004bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bfa:	f7fc fe47 	bl	800188c <HAL_GetTick>
 8004bfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d10e      	bne.n	8004c2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f814 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e00a      	b.n	8004c42 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	e05d      	b.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d059      	beq.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fc fe12 	bl	800188c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11b      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e042      	b.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02b      	beq.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cce:	d123      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ce8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e00f      	b.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d092      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0d      	ldr	r6, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1ba4      	subs	r4, r4, r6
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	42a5      	cmp	r5, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4e0b      	ldr	r6, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f000 f820 	bl	8004d98 <_init>
 8004d58:	1ba4      	subs	r4, r4, r6
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	42a5      	cmp	r5, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d68:	4798      	blx	r3
 8004d6a:	3501      	adds	r5, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d72:	4798      	blx	r3
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	08004dd0 	.word	0x08004dd0
 8004d7c:	08004dd0 	.word	0x08004dd0
 8004d80:	08004dd0 	.word	0x08004dd0
 8004d84:	08004dd4 	.word	0x08004dd4

08004d88 <memset>:
 8004d88:	4402      	add	r2, r0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <_init>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr

08004da4 <_fini>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr
