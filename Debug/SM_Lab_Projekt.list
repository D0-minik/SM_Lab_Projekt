
SM_Lab_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068fc  080068fc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006904  08006904  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800690c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000088  08006994  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006994  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c10  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b9  00000000  00000000  00032cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026614  00000000  00000000  000376a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e847  00000000  00000000  0005dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000edae4  00000000  00000000  0006c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  0015a05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006860 	.word	0x08006860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08006860 	.word	0x08006860

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <lcd_init>:
/* Private variables ---------------------------------------------------------*/
const uint8_t LCD_ROW_16[] = {0x00, 0x40, 0x10, 0x50};

/* Private function ----------------------------------------------------------*/
void lcd_init (LCD_HandleTypeDef* hLCD)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

	// 4 bit initialisation

	lcd_send_cmd (hLCD,0x33);  // 0011 0011
 8000df4:	2133      	movs	r1, #51	; 0x33
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f827 	bl	8000e4a <lcd_send_cmd>
	lcd_send_cmd (hLCD, 0x32); // 0011 0010
 8000dfc:	2132      	movs	r1, #50	; 0x32
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f823 	bl	8000e4a <lcd_send_cmd>
	lcd_send_cmd (hLCD, LCD_FUNCTION_SET | LCD_OPT_N); // 4-bit mode
 8000e04:	2128      	movs	r1, #40	; 0x28
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f81f 	bl	8000e4a <lcd_send_cmd>


  // dislay initialisation

	 lcd_send_cmd(hLCD, LCD_CLEAR_DISPLAY);                    // Clear screen
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f81b 	bl	8000e4a <lcd_send_cmd>
	  lcd_send_cmd(hLCD, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8000e14:	210c      	movs	r1, #12
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f817 	bl	8000e4a <lcd_send_cmd>
	  lcd_send_cmd(hLCD, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 8000e1c:	2106      	movs	r1, #6
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f813 	bl	8000e4a <lcd_send_cmd>

}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <lcd_clear>:

void lcd_clear (LCD_HandleTypeDef* hLCD)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hLCD,LCD_CLEAR_DISPLAY);
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f807 	bl	8000e4a <lcd_send_cmd>
	HAL_Delay(2);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f001 f81d 	bl	8001e7c <HAL_Delay>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <lcd_send_cmd>:

void lcd_send_cmd (LCD_HandleTypeDef* hLCD, char cmd)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af02      	add	r7, sp, #8
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	f023 030f 	bic.w	r3, r3, #15
 8000e5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f043 030c 	orr.w	r3, r3, #12
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f043 030c 	orr.w	r3, r3, #12
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hLCD->I2C, LCD_ADDRESS,(uint8_t *) data_t, 4, 10);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f107 0208 	add.w	r2, r7, #8
 8000e94:	230a      	movs	r3, #10
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2304      	movs	r3, #4
 8000e9a:	214e      	movs	r1, #78	; 0x4e
 8000e9c:	f001 fbca 	bl	8002634 <HAL_I2C_Master_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <lcd_send_data>:


void lcd_send_data (LCD_HandleTypeDef* hLCD, char data)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f043 030d 	orr.w	r3, r3, #13
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0309 	orr.w	r3, r3, #9
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	f043 030d 	orr.w	r3, r3, #13
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	f043 0309 	orr.w	r3, r3, #9
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hLCD->I2C, LCD_ADDRESS,(uint8_t *) data_t, 4, 10);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f107 0208 	add.w	r2, r7, #8
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	214e      	movs	r1, #78	; 0x4e
 8000efa:	f001 fb9b 	bl	8002634 <HAL_I2C_Master_Transmit>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <lcd_SetCursor>:

void lcd_SetCursor(LCD_HandleTypeDef* hLCD, uint8_t row, uint8_t col)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
 8000f14:	4613      	mov	r3, r2
 8000f16:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(hLCD, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <lcd_SetCursor+0x38>)
 8000f1c:	5cd2      	ldrb	r2, [r2, r3]
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	4413      	add	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3b80      	subs	r3, #128	; 0x80
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff8d 	bl	8000e4a <lcd_send_cmd>
	HAL_Delay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 ffa3 	bl	8001e7c <HAL_Delay>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080068ac 	.word	0x080068ac

08000f44 <lcd_send_string>:

void lcd_send_string (LCD_HandleTypeDef* hLCD, char *str, uint8_t row, uint8_t col)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	460b      	mov	r3, r1
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	4613      	mov	r3, r2
 8000f58:	71bb      	strb	r3, [r7, #6]
	lcd_SetCursor(hLCD,row,col);
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f7ff ffd1 	bl	8000f08 <lcd_SetCursor>
	while (*str) lcd_send_data (hLCD,*str++);
 8000f66:	e007      	b.n	8000f78 <lcd_send_string+0x34>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff ff98 	bl	8000ea8 <lcd_send_data>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <lcd_send_string+0x24>
	//for(uint8_t i = 0; i < strlen(str); i++)
	  //  lcd_send_data(hLCD, str[i]);
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f107 020f 	add.w	r2, r7, #15
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f001 fb43 	bl	8002634 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	b299      	uxth	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f107 020f 	add.w	r2, r7, #15
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f001 fb34 	bl	8002634 <HAL_I2C_Master_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f001 fc13 	bl	800281c <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	7b7a      	ldrb	r2, [r7, #13]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faa8 	bl	8000554 <__aeabi_i2d>
 8001004:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <BH1750_ReadLux+0x58>)
 800100a:	f7ff fc37 	bl	800087c <__aeabi_ddiv>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4618      	mov	r0, r3
 8001014:	4621      	mov	r1, r4
 8001016:	f7ff fd19 	bl	8000a4c <__aeabi_d2f>
 800101a:	4603      	mov	r3, r0
 800101c:	ee07 3a90 	vmov	s15, r3
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	bf00      	nop
 800102c:	3ff33333 	.word	0x3ff33333

08001030 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d150      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		 lux = BH1750_ReadLux(&hbh1750_1);
 8001042:	482b      	ldr	r0, [pc, #172]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001044:	f7ff ffc6 	bl	8000fd4 <BH1750_ReadLux>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
		 setValue = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4)/4;
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	b29b      	uxth	r3, r3
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001060:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001062:	2101      	movs	r1, #1
 8001064:	4826      	ldr	r0, [pc, #152]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001066:	f001 fa3a 	bl	80024de <HAL_GPIO_TogglePin>
		if( (uint16_t)lux < setValue && PWM < 2000)
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d20b      	bcs.n	800109a <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800108a:	d206      	bcs.n	800109a <HAL_TIM_PeriodElapsedCallback+0x6a>
			PWM++;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e009      	b.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x7e>
		else if(PWM>0)
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x7e>
			PWM--;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010ac:	801a      	strh	r2, [r3, #0]
		if(PWM<=1000)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b6:	d809      	bhi.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (PWM-1000));
		}
	}
}
 80010ca:	e00b      	b.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xb4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (PWM-1000));
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40001000 	.word	0x40001000
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000238 	.word	0x20000238
 80010f8:	200000b4 	.word	0x200000b4
 80010fc:	20000236 	.word	0x20000236
 8001100:	40020400 	.word	0x40020400
 8001104:	200000a4 	.word	0x200000a4
 8001108:	200001c4 	.word	0x200001c4

0800110c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	4831      	ldr	r0, [pc, #196]	; (80011e0 <HAL_UART_RxCpltCallback+0xd4>)
 800111a:	f001 f9e0 	bl	80024de <HAL_GPIO_TogglePin>

	if(huart->Instance == USART3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <HAL_UART_RxCpltCallback+0xd8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d152      	bne.n	80011ce <HAL_UART_RxCpltCallback+0xc2>
	{
		//char text[3];
		int16_t SetLux;
		//Przykładowa ramka: “PWM1234”
		//strncpy(text,&reciveLux,3);
		if(reciveLux[0]=='L' && reciveLux[1]=='U' && reciveLux[2]=='X')
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b4c      	cmp	r3, #76	; 0x4c
 800112e:	d14e      	bne.n	80011ce <HAL_UART_RxCpltCallback+0xc2>
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	2b55      	cmp	r3, #85	; 0x55
 8001136:	d14a      	bne.n	80011ce <HAL_UART_RxCpltCallback+0xc2>
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	2b58      	cmp	r3, #88	; 0x58
 800113e:	d146      	bne.n	80011ce <HAL_UART_RxCpltCallback+0xc2>
		{
			SetLux = 1000*((int8_t)reciveLux[3]-'0')+100*((int8_t)reciveLux[4]-'0')+10*((int8_t)reciveLux[5]-'0')+1*((int8_t)reciveLux[6]-'0');
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	3b30      	subs	r3, #48	; 0x30
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	0152      	lsls	r2, r2, #5
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	3b30      	subs	r3, #48	; 0x30
 8001160:	b29b      	uxth	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	0089      	lsls	r1, r1, #2
 8001166:	440b      	add	r3, r1
 8001168:	4619      	mov	r1, r3
 800116a:	0088      	lsls	r0, r1, #2
 800116c:	4619      	mov	r1, r3
 800116e:	4603      	mov	r3, r0
 8001170:	440b      	add	r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	3b30      	subs	r3, #48	; 0x30
 8001182:	b29b      	uxth	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	0089      	lsls	r1, r1, #2
 8001188:	440b      	add	r3, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 8001194:	799b      	ldrb	r3, [r3, #6]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b30      	subs	r3, #48	; 0x30
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	81fb      	strh	r3, [r7, #14]
			if(SetLux>999)SetLux=999;
 80011a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ac:	db03      	blt.n	80011b6 <HAL_UART_RxCpltCallback+0xaa>
 80011ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80011b2:	81fb      	strh	r3, [r7, #14]
 80011b4:	e005      	b.n	80011c2 <HAL_UART_RxCpltCallback+0xb6>
			else if(SetLux<0)SetLux=0;
 80011b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da01      	bge.n	80011c2 <HAL_UART_RxCpltCallback+0xb6>
 80011be:	2300      	movs	r3, #0
 80011c0:	81fb      	strh	r3, [r7, #14]
			__HAL_TIM_SET_COUNTER(&htim4, SetLux*4);
 80011c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c6:	009a      	lsls	r2, r3, #2
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_UART_RxCpltCallback+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}


	HAL_UART_Receive_IT(&huart3,(uint8_t*)reciveLux,7);
 80011ce:	2207      	movs	r2, #7
 80011d0:	4905      	ldr	r1, [pc, #20]	; (80011e8 <HAL_UART_RxCpltCallback+0xdc>)
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_UART_RxCpltCallback+0xe4>)
 80011d4:	f004 f838 	bl	8005248 <HAL_UART_Receive_IT>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40004800 	.word	0x40004800
 80011e8:	20000240 	.word	0x20000240
 80011ec:	200000b4 	.word	0x200000b4
 80011f0:	200000f4 	.word	0x200000f4

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f000 fde2 	bl	8001dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f899 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 fa8f 	bl	8001724 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001206:	f000 fa5d 	bl	80016c4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800120a:	f000 f927 	bl	800145c <MX_I2C1_Init>
  MX_TIM3_Init();
 800120e:	f000 f965 	bl	80014dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001212:	f000 f9c9 	bl	80015a8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001216:	f000 fa1d 	bl	8001654 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800121a:	213c      	movs	r1, #60	; 0x3c
 800121c:	4834      	ldr	r0, [pc, #208]	; (80012f0 <main+0xfc>)
 800121e:	f003 f8ad 	bl	800437c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001222:	2100      	movs	r1, #0
 8001224:	4833      	ldr	r0, [pc, #204]	; (80012f4 <main+0x100>)
 8001226:	f002 ffd3 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800122a:	2104      	movs	r1, #4
 800122c:	4831      	ldr	r0, [pc, #196]	; (80012f4 <main+0x100>)
 800122e:	f002 ffcf 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,(uint8_t*)reciveLux,7);
 8001232:	2207      	movs	r2, #7
 8001234:	4930      	ldr	r1, [pc, #192]	; (80012f8 <main+0x104>)
 8001236:	4831      	ldr	r0, [pc, #196]	; (80012fc <main+0x108>)
 8001238:	f004 f806 	bl	8005248 <HAL_UART_Receive_IT>

  BH1750_Init(&hbh1750_1);
 800123c:	4830      	ldr	r0, [pc, #192]	; (8001300 <main+0x10c>)
 800123e:	f7ff fea3 	bl	8000f88 <BH1750_Init>
  lcd_init(&hLCD_1);
 8001242:	4830      	ldr	r0, [pc, #192]	; (8001304 <main+0x110>)
 8001244:	f7ff fdd2 	bl	8000dec <lcd_init>
  //HAL_Delay(10);
 // lcd_send_cmd(&hLCD_1,LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);
  HAL_TIM_Base_Start_IT(&htim6);
 8001248:	482f      	ldr	r0, [pc, #188]	; (8001308 <main+0x114>)
 800124a:	f002 ff6b 	bl	8004124 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 800124e:	2101      	movs	r1, #1
 8001250:	482e      	ldr	r0, [pc, #184]	; (800130c <main+0x118>)
 8001252:	f001 f913 	bl	800247c <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <main+0x11c>)
 800125c:	701a      	strb	r2, [r3, #0]

	  sprintf(send_line, "Lux: %d ", (uint16_t)lux);
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <main+0x120>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b29b      	uxth	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	4929      	ldr	r1, [pc, #164]	; (8001318 <main+0x124>)
 8001272:	482a      	ldr	r0, [pc, #168]	; (800131c <main+0x128>)
 8001274:	f004 feee 	bl	8006054 <siprintf>
	  lcd_clear(&hLCD_1);
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <main+0x110>)
 800127a:	f7ff fdd7 	bl	8000e2c <lcd_clear>
	  lcd_send_string (&hLCD_1,send_line,0,0);
 800127e:	2300      	movs	r3, #0
 8001280:	2200      	movs	r2, #0
 8001282:	4926      	ldr	r1, [pc, #152]	; (800131c <main+0x128>)
 8001284:	481f      	ldr	r0, [pc, #124]	; (8001304 <main+0x110>)
 8001286:	f7ff fe5d 	bl	8000f44 <lcd_send_string>
	  HAL_Delay(2);
 800128a:	2002      	movs	r0, #2
 800128c:	f000 fdf6 	bl	8001e7c <HAL_Delay>
	  sprintf(send_line, "Set: %d ", (uint16_t)setValue);
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <main+0x12c>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4923      	ldr	r1, [pc, #140]	; (8001324 <main+0x130>)
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <main+0x128>)
 800129a:	f004 fedb 	bl	8006054 <siprintf>
	  lcd_send_string (&hLCD_1,send_line,1,0);
 800129e:	2300      	movs	r3, #0
 80012a0:	2201      	movs	r2, #1
 80012a2:	491e      	ldr	r1, [pc, #120]	; (800131c <main+0x128>)
 80012a4:	4817      	ldr	r0, [pc, #92]	; (8001304 <main+0x110>)
 80012a6:	f7ff fe4d 	bl	8000f44 <lcd_send_string>

	  uint8_t n = sprintf(send_line_usart, "Lux: %d Set: %d PWM: %d \n", (uint16_t)lux, (uint16_t)  setValue, (uint16_t) PWM);
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <main+0x120>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <main+0x12c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <main+0x134>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <main+0x138>)
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <main+0x13c>)
 80012ce:	f004 fec1 	bl	8006054 <siprintf>
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart3,(uint8_t*)send_line_usart,n,100);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	2364      	movs	r3, #100	; 0x64
 80012dc:	4914      	ldr	r1, [pc, #80]	; (8001330 <main+0x13c>)
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <main+0x108>)
 80012e0:	f003 ff20 	bl	8005124 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e8:	f000 fdc8 	bl	8001e7c <HAL_Delay>
  {
 80012ec:	e7af      	b.n	800124e <main+0x5a>
 80012ee:	bf00      	nop
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	200001c4 	.word	0x200001c4
 80012f8:	20000240 	.word	0x20000240
 80012fc:	200000f4 	.word	0x200000f4
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000000 	.word	0x20000000
 8001308:	2000024c 	.word	0x2000024c
 800130c:	40020400 	.word	0x40020400
 8001310:	2000023c 	.word	0x2000023c
 8001314:	20000238 	.word	0x20000238
 8001318:	08006878 	.word	0x08006878
 800131c:	2000028c 	.word	0x2000028c
 8001320:	20000236 	.word	0x20000236
 8001324:	08006884 	.word	0x08006884
 8001328:	200000a4 	.word	0x200000a4
 800132c:	08006890 	.word	0x08006890
 8001330:	20000204 	.word	0x20000204

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0b4      	sub	sp, #208	; 0xd0
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fe7e 	bl	8006044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2284      	movs	r2, #132	; 0x84
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fe6f 	bl	8006044 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001366:	f001 fdc7 	bl	8002ef8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <SystemClock_Config+0x120>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a39      	ldr	r2, [pc, #228]	; (8001454 <SystemClock_Config+0x120>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <SystemClock_Config+0x120>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <SystemClock_Config+0x124>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <SystemClock_Config+0x124>)
 8001388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <SystemClock_Config+0x124>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139a:	2301      	movs	r3, #1
 800139c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013bc:	23d8      	movs	r3, #216	; 0xd8
 80013be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fdf0 	bl	8002fb8 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013de:	f000 faa5 	bl	800192c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013e2:	f001 fd99 	bl	8002f18 <HAL_PWREx_EnableOverDrive>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80013ec:	f000 fa9e 	bl	800192c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001402:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001406:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001412:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001416:	2107      	movs	r1, #7
 8001418:	4618      	mov	r0, r3
 800141a:	f002 f871 	bl	8003500 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001424:	f000 fa82 	bl	800192c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001428:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800142c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800142e:	2300      	movs	r3, #0
 8001430:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fa58 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001446:	f000 fa71 	bl	800192c <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	37d0      	adds	r7, #208	; 0xd0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_I2C1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_I2C1_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <MX_I2C1_Init+0x74>)
 8001498:	f001 f83c 	bl	8002514 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 fa43 	bl	800192c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_I2C1_Init+0x74>)
 80014aa:	f001 fc8d 	bl	8002dc8 <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 fa3a 	bl	800192c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C1_Init+0x74>)
 80014bc:	f001 fccf 	bl	8002e5e <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 fa31 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000174 	.word	0x20000174
 80014d4:	40005400 	.word	0x40005400
 80014d8:	20404768 	.word	0x20404768

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001502:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <MX_TIM3_Init+0xc8>)
 8001504:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001508:	226b      	movs	r2, #107	; 0x6b
 800150a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_TIM3_Init+0xc4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_TIM3_Init+0xc4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001526:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001528:	f002 fe26 	bl	8004178 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001532:	f000 f9fb 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001546:	f003 fcf3 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001550:	f000 f9ec 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM3_Init+0xc4>)
 800156c:	f003 f87c 	bl	8004668 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001576:	f000 f9d9 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001582:	f003 f871 	bl	8004668 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800158c:	f000 f9ce 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM3_Init+0xc4>)
 8001592:	f000 fac1 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001c4 	.word	0x200001c4
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fd44 	bl	8006044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_TIM4_Init+0xa4>)
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <MX_TIM4_Init+0xa8>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_TIM4_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_TIM4_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM4_Init+0xa4>)
 80015da:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80015de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM4_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_TIM4_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM4_Init+0xa4>)
 8001618:	f002 fe1e 	bl	8004258 <HAL_TIM_Encoder_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001622:	f000 f983 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_TIM4_Init+0xa4>)
 8001634:	f003 fc7c 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800163e:	f000 f975 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3730      	adds	r7, #48	; 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000b4 	.word	0x200000b4
 8001650:	40000800 	.word	0x40000800

08001654 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM6_Init+0x68>)
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <MX_TIM6_Init+0x6c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10799;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_TIM6_Init+0x68>)
 800166c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001670:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_TIM6_Init+0x68>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_TIM6_Init+0x68>)
 800167a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_TIM6_Init+0x68>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_TIM6_Init+0x68>)
 8001688:	f002 fd20 	bl	80040cc <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001692:	f000 f94b 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_TIM6_Init+0x68>)
 80016a4:	f003 fc44 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016ae:	f000 f93d 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000024c 	.word	0x2000024c
 80016c0:	40001000 	.word	0x40001000

080016c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_USART3_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016ec:	220c      	movs	r2, #12
 80016ee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART3_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_USART3_UART_Init+0x58>)
 800170a:	f003 fcbd 	bl	8005088 <HAL_UART_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8001714:	f000 f90a 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200000f4 	.word	0x200000f4
 8001720:	40004800 	.word	0x40004800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b76      	ldr	r3, [pc, #472]	; (8001914 <MX_GPIO_Init+0x1f0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a75      	ldr	r2, [pc, #468]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	4b70      	ldr	r3, [pc, #448]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a6f      	ldr	r2, [pc, #444]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <MX_GPIO_Init+0x1f0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a69      	ldr	r2, [pc, #420]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b64      	ldr	r3, [pc, #400]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a63      	ldr	r2, [pc, #396]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <MX_GPIO_Init+0x1f0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <MX_GPIO_Init+0x1f0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a5d      	ldr	r2, [pc, #372]	; (8001914 <MX_GPIO_Init+0x1f0>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <MX_GPIO_Init+0x1f0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <MX_GPIO_Init+0x1f0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a57      	ldr	r2, [pc, #348]	; (8001914 <MX_GPIO_Init+0x1f0>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b55      	ldr	r3, [pc, #340]	; (8001914 <MX_GPIO_Init+0x1f0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80017d0:	4851      	ldr	r0, [pc, #324]	; (8001918 <MX_GPIO_Init+0x1f4>)
 80017d2:	f000 fe6b 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4850      	ldr	r0, [pc, #320]	; (800191c <MX_GPIO_Init+0x1f8>)
 80017dc:	f000 fe66 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <MX_GPIO_Init+0x1fc>)
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	484b      	ldr	r0, [pc, #300]	; (8001924 <MX_GPIO_Init+0x200>)
 80017f6:	f000 fc97 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017fa:	2332      	movs	r3, #50	; 0x32
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800180a:	230b      	movs	r3, #11
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4843      	ldr	r0, [pc, #268]	; (8001924 <MX_GPIO_Init+0x200>)
 8001816:	f000 fc87 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800181a:	2386      	movs	r3, #134	; 0x86
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	483c      	ldr	r0, [pc, #240]	; (8001928 <MX_GPIO_Init+0x204>)
 8001836:	f000 fc77 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800183a:	f244 0381 	movw	r3, #16513	; 0x4081
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4831      	ldr	r0, [pc, #196]	; (8001918 <MX_GPIO_Init+0x1f4>)
 8001854:	f000 fc68 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800186a:	230b      	movs	r3, #11
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4828      	ldr	r0, [pc, #160]	; (8001918 <MX_GPIO_Init+0x1f4>)
 8001876:	f000 fc57 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4822      	ldr	r0, [pc, #136]	; (800191c <MX_GPIO_Init+0x1f8>)
 8001892:	f000 fc49 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	481c      	ldr	r0, [pc, #112]	; (800191c <MX_GPIO_Init+0x1f8>)
 80018aa:	f000 fc3d 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c0:	230a      	movs	r3, #10
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4817      	ldr	r0, [pc, #92]	; (8001928 <MX_GPIO_Init+0x204>)
 80018cc:	f000 fc2c 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4810      	ldr	r0, [pc, #64]	; (8001928 <MX_GPIO_Init+0x204>)
 80018e6:	f000 fc1f 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fc:	230b      	movs	r3, #11
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_GPIO_Init+0x1f8>)
 8001908:	f000 fc0e 	bl	8002128 <HAL_GPIO_Init>

}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400
 800191c:	40021800 	.word	0x40021800
 8001920:	10110000 	.word	0x10110000
 8001924:	40020800 	.word	0x40020800
 8001928:	40020000 	.word	0x40020000

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001932:	e7fe      	b.n	8001932 <Error_Handler+0x6>

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_MspInit+0x44>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_MspInit+0x44>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_MspInit+0x44>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_MspInit+0x44>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_MspInit+0x44>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_MspInit+0x44>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_I2C_MspInit+0x7c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d128      	bne.n	80019f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	2312      	movs	r3, #18
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c8:	2304      	movs	r3, #4
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <HAL_I2C_MspInit+0x84>)
 80019d4:	f000 fba8 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_I2C_MspInit+0x80>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40005400 	.word	0x40005400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_TIM_PWM_MspInit+0x38>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10b      	bne.n	8001a2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d128      	bne.n	8001ab8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ab4:	f000 fb38 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40000800 	.word	0x40000800
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020c00 	.word	0x40020c00

08001acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_TIM_Base_MspInit+0x44>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d113      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0x48>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0x48>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x48>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2036      	movs	r0, #54	; 0x36
 8001afc:	f000 fabb 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b00:	2036      	movs	r0, #54	; 0x36
 8001b02:	f000 fad4 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40001000 	.word	0x40001000
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_TIM_MspPostInit+0x9c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d137      	bne.n	8001baa <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_TIM_MspPostInit+0xa0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b6a:	2340      	movs	r3, #64	; 0x40
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <HAL_TIM_MspPostInit+0xa4>)
 8001b86:	f000 facf 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <HAL_TIM_MspPostInit+0xa8>)
 8001ba6:	f000 fabf 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020800 	.word	0x40020800

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_UART_MspInit+0x8c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d130      	bne.n	8001c48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspInit+0x90>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_UART_MspInit+0x94>)
 8001c34:	f000 fa78 	bl	8002128 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2027      	movs	r0, #39	; 0x27
 8001c3e:	f000 fa1a 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c42:	2027      	movs	r0, #39	; 0x27
 8001c44:	f000 fa33 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004800 	.word	0x40004800
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020c00 	.word	0x40020c00

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f8c8 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <USART3_IRQHandler+0x10>)
 8001cb6:	f003 fb69 	bl	800538c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000f4 	.word	0x200000f4

08001cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM6_DAC_IRQHandler+0x10>)
 8001cca:	f002 fbae 	bl	800442a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000024c 	.word	0x2000024c

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f004 f972 	bl	8005ff0 <__errno>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	230c      	movs	r3, #12
 8001d10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20050000 	.word	0x20050000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	200000a8 	.word	0x200000a8
 8001d40:	200002b0 	.word	0x200002b0

08001d44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <SystemInit+0x28>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <SystemInit+0x28>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SystemInit+0x28>)
 8001d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d76:	e003      	b.n	8001d80 <LoopCopyDataInit>

08001d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d7e:	3104      	adds	r1, #4

08001d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d88:	d3f6      	bcc.n	8001d78 <CopyDataInit>
  ldr  r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d8c:	e002      	b.n	8001d94 <LoopFillZerobss>

08001d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d90:	f842 3b04 	str.w	r3, [r2], #4

08001d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d98:	d3f9      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff ffd3 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f004 f92d 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fa27 	bl	80011f4 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001dac:	0800690c 	.word	0x0800690c
  ldr  r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001db8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001dbc:	200002b0 	.word	0x200002b0

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>

08001dc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 f94a 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f000 f805 	bl	8001ddc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001dd2:	f7ff fdaf 	bl	8001934 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f965 	bl	80020ca <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f92d 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000018 	.word	0x20000018
 8001e34:	20000020 	.word	0x20000020
 8001e38:	2000001c 	.word	0x2000001c

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000020 	.word	0x20000020
 8001e60:	200002a8 	.word	0x200002a8

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200002a8 	.word	0x200002a8

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_Delay+0x40>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000020 	.word	0x20000020

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	05fa0000 	.word	0x05fa0000

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e00c      	b.n	800211a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2205      	movs	r2, #5
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e175      	b.n	8002434 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8164 	bne.w	800242e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00b      	beq.n	8002186 <HAL_GPIO_Init+0x5e>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	2b11      	cmp	r3, #17
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x100>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80be 	beq.w	800242e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_GPIO_Init+0x320>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a64      	ldr	r2, [pc, #400]	; (8002448 <HAL_GPIO_Init+0x320>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b62      	ldr	r3, [pc, #392]	; (8002448 <HAL_GPIO_Init+0x320>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ca:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_GPIO_Init+0x324>)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a57      	ldr	r2, [pc, #348]	; (8002450 <HAL_GPIO_Init+0x328>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d037      	beq.n	8002366 <HAL_GPIO_Init+0x23e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_GPIO_Init+0x32c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d031      	beq.n	8002362 <HAL_GPIO_Init+0x23a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a55      	ldr	r2, [pc, #340]	; (8002458 <HAL_GPIO_Init+0x330>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02b      	beq.n	800235e <HAL_GPIO_Init+0x236>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a54      	ldr	r2, [pc, #336]	; (800245c <HAL_GPIO_Init+0x334>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d025      	beq.n	800235a <HAL_GPIO_Init+0x232>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a53      	ldr	r2, [pc, #332]	; (8002460 <HAL_GPIO_Init+0x338>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <HAL_GPIO_Init+0x22e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_GPIO_Init+0x33c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d019      	beq.n	8002352 <HAL_GPIO_Init+0x22a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_GPIO_Init+0x340>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x226>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a50      	ldr	r2, [pc, #320]	; (800246c <HAL_GPIO_Init+0x344>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x222>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4f      	ldr	r2, [pc, #316]	; (8002470 <HAL_GPIO_Init+0x348>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x21e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4e      	ldr	r2, [pc, #312]	; (8002474 <HAL_GPIO_Init+0x34c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x21a>
 800233e:	2309      	movs	r3, #9
 8002340:	e012      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002342:	230a      	movs	r3, #10
 8002344:	e010      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002346:	2308      	movs	r3, #8
 8002348:	e00e      	b.n	8002368 <HAL_GPIO_Init+0x240>
 800234a:	2307      	movs	r3, #7
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x240>
 800234e:	2306      	movs	r3, #6
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x240>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x240>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x240>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002378:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_GPIO_Init+0x324>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_GPIO_Init+0x350>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023aa:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_GPIO_Init+0x350>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_GPIO_Init+0x350>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x350>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <HAL_GPIO_Init+0x350>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f ae86 	bls.w	8002148 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3724      	adds	r7, #36	; 0x24
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40022000 	.word	0x40022000
 8002474:	40022400 	.word	0x40022400
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e001      	b.n	800249e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fa1e 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	e006      	b.n	800259c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800259a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d104      	bne.n	80025ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_I2C_Init+0x11c>)
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	ea42 0103 	orr.w	r1, r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69d9      	ldr	r1, [r3, #28]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	02008000 	.word	0x02008000

08002634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
 8002644:	4613      	mov	r3, r2
 8002646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b20      	cmp	r3, #32
 8002652:	f040 80da 	bne.w	800280a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x30>
 8002660:	2302      	movs	r3, #2
 8002662:	e0d3      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800266c:	f7ff fbfa 	bl	8001e64 <HAL_GetTick>
 8002670:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f9e6 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0be      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2221      	movs	r2, #33	; 0x21
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2210      	movs	r2, #16
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2bff      	cmp	r3, #255	; 0xff
 80026be:	d90e      	bls.n	80026de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_I2C_Master_Transmit+0x1e0>)
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb48 	bl	8002d6c <I2C_TransferConfig>
 80026dc:	e06c      	b.n	80027b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_I2C_Master_Transmit+0x1e0>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fb37 	bl	8002d6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80026fe:	e05b      	b.n	80027b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	6a39      	ldr	r1, [r7, #32]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f9e3 	bl	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e07b      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d034      	beq.n	80027b8 <HAL_I2C_Master_Transmit+0x184>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d130      	bne.n	80027b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f975 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e04d      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2bff      	cmp	r3, #255	; 0xff
 8002778:	d90e      	bls.n	8002798 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	22ff      	movs	r2, #255	; 0xff
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	b2da      	uxtb	r2, r3
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 faeb 	bl	8002d6c <I2C_TransferConfig>
 8002796:	e00f      	b.n	80027b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	2300      	movs	r3, #0
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fada 	bl	8002d6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d19e      	bne.n	8002700 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f9c2 	bl	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e01a      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2220      	movs	r2, #32
 80027dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_I2C_Master_Transmit+0x1e4>)
 80027ea:	400b      	ands	r3, r1
 80027ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	80002000 	.word	0x80002000
 8002818:	fe00e800 	.word	0xfe00e800

0800281c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	460b      	mov	r3, r1
 800282a:	817b      	strh	r3, [r7, #10]
 800282c:	4613      	mov	r3, r2
 800282e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 80db 	bne.w	80029f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Receive+0x30>
 8002848:	2302      	movs	r3, #2
 800284a:	e0d4      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002854:	f7ff fb06 	bl	8001e64 <HAL_GetTick>
 8002858:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2319      	movs	r3, #25
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f8f2 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0bf      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2222      	movs	r2, #34	; 0x22
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2210      	movs	r2, #16
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	893a      	ldrh	r2, [r7, #8]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2bff      	cmp	r3, #255	; 0xff
 80028a6:	d90e      	bls.n	80028c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_I2C_Master_Receive+0x1e4>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa54 	bl	8002d6c <I2C_TransferConfig>
 80028c4:	e06d      	b.n	80029a2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	8979      	ldrh	r1, [r7, #10]
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_I2C_Master_Receive+0x1e4>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fa43 	bl	8002d6c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80028e6:	e05c      	b.n	80029a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6a39      	ldr	r1, [r7, #32]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f96b 	bl	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e07c      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d034      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x186>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d130      	bne.n	80029a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2200      	movs	r2, #0
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f880 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e04d      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2bff      	cmp	r3, #255	; 0xff
 8002962:	d90e      	bls.n	8002982 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	22ff      	movs	r2, #255	; 0xff
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f9f6 	bl	8002d6c <I2C_TransferConfig>
 8002980:	e00f      	b.n	80029a2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9e5 	bl	8002d6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d19d      	bne.n	80028e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6a39      	ldr	r1, [r7, #32]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8cd 	bl	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e01a      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_I2C_Master_Receive+0x1e8>)
 80029d4:	400b      	ands	r3, r1
 80029d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	80002400 	.word	0x80002400
 8002a04:	fe00e800 	.word	0xfe00e800

08002a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	619a      	str	r2, [r3, #24]
  }
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e022      	b.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d01e      	beq.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff f9fb 	bl	8001e64 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d113      	bne.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00f      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d0cd      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002adc:	e02c      	b.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8dc 	bl	8002ca0 <I2C_IsAcknowledgeFailed>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e02a      	b.n	8002b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d01e      	beq.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7ff f9b3 	bl	8001e64 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e007      	b.n	8002b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d1cb      	bne.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b5c:	e028      	b.n	8002bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f89c 	bl	8002ca0 <I2C_IsAcknowledgeFailed>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e026      	b.n	8002bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7ff f977 	bl	8001e64 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e007      	b.n	8002bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d1cf      	bne.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd4:	e055      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f860 	bl	8002ca0 <I2C_IsAcknowledgeFailed>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e053      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d129      	bne.n	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d105      	bne.n	8002c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e03f      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2220      	movs	r2, #32
 8002c18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002c26:	400b      	ands	r3, r1
 8002c28:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e022      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7ff f90a 	bl	8001e64 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d1a2      	bne.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	fe00e800 	.word	0xfe00e800

08002ca0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d151      	bne.n	8002d5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cba:	e022      	b.n	8002d02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d01e      	beq.n	8002d02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc4:	f7ff f8ce 	bl	8001e64 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d302      	bcc.n	8002cda <I2C_IsAcknowledgeFailed+0x3a>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d113      	bne.n	8002d02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02e      	b.n	8002d60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d1d5      	bne.n	8002cbc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fe71 	bl	8002a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <I2C_IsAcknowledgeFailed+0xc8>)
 8002d32:	400b      	ands	r3, r1
 8002d34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	fe00e800 	.word	0xfe00e800

08002d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <I2C_TransferConfig+0x58>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	43db      	mvns	r3, r3
 8002d92:	ea02 0103 	and.w	r1, r2, r3
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d9c:	7a7b      	ldrb	r3, [r7, #9]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	03ff63ff 	.word	0x03ff63ff

08002dc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d138      	bne.n	8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e032      	b.n	8002e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d139      	bne.n	8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e033      	b.n	8002eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	; 0x24
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000

08002f18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f46:	f7fe ff8d 	bl	8001e64 <HAL_GetTick>
 8002f4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f4c:	e009      	b.n	8002f62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f4e:	f7fe ff89 	bl	8001e64 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5c:	d901      	bls.n	8002f62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e022      	b.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7fe ff72 	bl	8001e64 <HAL_GetTick>
 8002f80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f82:	e009      	b.n	8002f98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f84:	f7fe ff6e 	bl	8001e64 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f92:	d901      	bls.n	8002f98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e007      	b.n	8002fa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e291      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8087 	beq.w	80030ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fdc:	4b96      	ldr	r3, [pc, #600]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d00c      	beq.n	8003002 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe8:	4b93      	ldr	r3, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d112      	bne.n	800301a <HAL_RCC_OscConfig+0x62>
 8002ff4:	4b90      	ldr	r3, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d10b      	bne.n	800301a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003002:	4b8d      	ldr	r3, [pc, #564]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x130>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d168      	bne.n	80030e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e26b      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x7a>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e02e      	b.n	8003090 <HAL_RCC_OscConfig+0xd8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x9c>
 800303a:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7e      	ldr	r2, [pc, #504]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800304c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xd8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0xc0>
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a72      	ldr	r2, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xd8>
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6b      	ldr	r2, [pc, #428]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fee4 	bl	8001e64 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fee0 	bl	8001e64 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e21f      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xe8>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fed0 	bl	8001e64 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fecc 	bl	8001e64 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e20b      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x110>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d069      	beq.n	80031ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x190>
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x17a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1df      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	493d      	ldr	r1, [pc, #244]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e040      	b.n	80031ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a38      	ldr	r2, [pc, #224]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fe82 	bl	8001e64 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fe7e 	bl	8001e64 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1bd      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4929      	ldr	r1, [pc, #164]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	e018      	b.n	80031ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a26      	ldr	r2, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe fe5e 	bl	8001e64 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe fe5a 	bl	8001e64 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e199      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d038      	beq.n	8003248 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d019      	beq.n	8003212 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fe3b 	bl	8001e64 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f2:	f7fe fe37 	bl	8001e64 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e176      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x23a>
 8003210:	e01a      	b.n	8003248 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x280>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fe21 	bl	8001e64 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fe fe1d 	bl	8001e64 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d903      	bls.n	800323c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e15c      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
 8003238:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b91      	ldr	r3, [pc, #580]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a4 	beq.w	800339e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a87      	ldr	r2, [pc, #540]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	4b82      	ldr	r3, [pc, #520]	; (8003488 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800328a:	4b7f      	ldr	r3, [pc, #508]	; (8003488 <HAL_RCC_OscConfig+0x4d0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7e      	ldr	r2, [pc, #504]	; (8003488 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fe fde5 	bl	8001e64 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe fde1 	bl	8001e64 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b64      	cmp	r3, #100	; 0x64
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e120      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	4b75      	ldr	r3, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x31a>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e02d      	b.n	800332e <HAL_RCC_OscConfig+0x376>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x33c>
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a69      	ldr	r2, [pc, #420]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	e01c      	b.n	800332e <HAL_RCC_OscConfig+0x376>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d10c      	bne.n	8003316 <HAL_RCC_OscConfig+0x35e>
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a60      	ldr	r2, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a5d      	ldr	r2, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e00b      	b.n	800332e <HAL_RCC_OscConfig+0x376>
 8003316:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a57      	ldr	r2, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d015      	beq.n	8003362 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fd95 	bl	8001e64 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe fd91 	bl	8001e64 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0ce      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <HAL_RCC_OscConfig+0x386>
 8003360:	e014      	b.n	800338c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe fd7f 	bl	8001e64 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe fd7b 	bl	8001e64 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ee      	bne.n	800336a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d105      	bne.n	800339e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a4 	beq.w	80034f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d06b      	beq.n	800348c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d149      	bne.n	8003450 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fd4c 	bl	8001e64 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe fd48 	bl	8001e64 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e087      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	4313      	orrs	r3, r2
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800341a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fd1c 	bl	8001e64 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fd18 	bl	8001e64 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e057      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x478>
 800344e:	e04f      	b.n	80034f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fd02 	bl	8001e64 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fcfe 	bl	8001e64 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e03d      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x4ac>
 8003482:	e035      	b.n	80034f0 <HAL_RCC_OscConfig+0x538>
 8003484:	40023800 	.word	0x40023800
 8003488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x544>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d028      	beq.n	80034ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d121      	bne.n	80034ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d11a      	bne.n	80034ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800

08003500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d0      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d910      	bls.n	8003548 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 020f 	bic.w	r2, r3, #15
 800352e:	4965      	ldr	r1, [pc, #404]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d040      	beq.n	8003624 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d115      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e073      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06b      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4936      	ldr	r1, [pc, #216]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fe fc36 	bl	8001e64 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe fc32 	bl	8001e64 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e053      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 020c 	and.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d1eb      	bne.n	80035fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d210      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	4922      	ldr	r1, [pc, #136]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f821 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	fa21 f303 	lsr.w	r3, r1, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fb92 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080068b0 	.word	0x080068b0
 80036d0:	20000018 	.word	0x20000018
 80036d4:	2000001c 	.word	0x2000001c

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ee:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d007      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x32>
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d008      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x38>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80b4 	bne.w	800386c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003706:	60bb      	str	r3, [r7, #8]
      break;
 8003708:	e0b3      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370a:	4b5e      	ldr	r3, [pc, #376]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800370c:	60bb      	str	r3, [r7, #8]
      break;
 800370e:	e0b0      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003710:	4b5a      	ldr	r3, [pc, #360]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003718:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800371a:	4b58      	ldr	r3, [pc, #352]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04a      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	f04f 0400 	mov.w	r4, #0
 8003730:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	ea03 0501 	and.w	r5, r3, r1
 800373c:	ea04 0602 	and.w	r6, r4, r2
 8003740:	4629      	mov	r1, r5
 8003742:	4632      	mov	r2, r6
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	0154      	lsls	r4, r2, #5
 800374e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	4619      	mov	r1, r3
 8003756:	4622      	mov	r2, r4
 8003758:	1b49      	subs	r1, r1, r5
 800375a:	eb62 0206 	sbc.w	r2, r2, r6
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	0194      	lsls	r4, r2, #6
 8003768:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800376c:	018b      	lsls	r3, r1, #6
 800376e:	1a5b      	subs	r3, r3, r1
 8003770:	eb64 0402 	sbc.w	r4, r4, r2
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	00e2      	lsls	r2, r4, #3
 800377e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	460b      	mov	r3, r1
 8003786:	4614      	mov	r4, r2
 8003788:	195b      	adds	r3, r3, r5
 800378a:	eb44 0406 	adc.w	r4, r4, r6
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	0262      	lsls	r2, r4, #9
 8003798:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800379c:	0259      	lsls	r1, r3, #9
 800379e:	460b      	mov	r3, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	4621      	mov	r1, r4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	f7fd f99c 	bl	8000aec <__aeabi_uldivmod>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e049      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	ea03 0501 	and.w	r5, r3, r1
 80037d2:	ea04 0602 	and.w	r6, r4, r2
 80037d6:	4629      	mov	r1, r5
 80037d8:	4632      	mov	r2, r6
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	0154      	lsls	r4, r2, #5
 80037e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037e8:	014b      	lsls	r3, r1, #5
 80037ea:	4619      	mov	r1, r3
 80037ec:	4622      	mov	r2, r4
 80037ee:	1b49      	subs	r1, r1, r5
 80037f0:	eb62 0206 	sbc.w	r2, r2, r6
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	0194      	lsls	r4, r2, #6
 80037fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003802:	018b      	lsls	r3, r1, #6
 8003804:	1a5b      	subs	r3, r3, r1
 8003806:	eb64 0402 	sbc.w	r4, r4, r2
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	00e2      	lsls	r2, r4, #3
 8003814:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003818:	00d9      	lsls	r1, r3, #3
 800381a:	460b      	mov	r3, r1
 800381c:	4614      	mov	r4, r2
 800381e:	195b      	adds	r3, r3, r5
 8003820:	eb44 0406 	adc.w	r4, r4, r6
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	02a2      	lsls	r2, r4, #10
 800382e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003832:	0299      	lsls	r1, r3, #10
 8003834:	460b      	mov	r3, r1
 8003836:	4614      	mov	r4, r2
 8003838:	4618      	mov	r0, r3
 800383a:	4621      	mov	r1, r4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	461a      	mov	r2, r3
 8003844:	4623      	mov	r3, r4
 8003846:	f7fd f951 	bl	8000aec <__aeabi_uldivmod>
 800384a:	4603      	mov	r3, r0
 800384c:	460c      	mov	r4, r1
 800384e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800386e:	60bb      	str	r3, [r7, #8]
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	68bb      	ldr	r3, [r7, #8]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200

08003888 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000018 	.word	0x20000018

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	080068c0 	.word	0x080068c0

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffdc 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d0:	4601      	mov	r1, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4a03      	ldr	r2, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	080068c0 	.word	0x080068c0

080038f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a68      	ldr	r2, [pc, #416]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	4964      	ldr	r1, [pc, #400]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	4959      	ldr	r1, [pc, #356]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003968:	d101      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003976:	2301      	movs	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003986:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	494a      	ldr	r1, [pc, #296]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a4:	d101      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 808b 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b3a      	ldr	r3, [pc, #232]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
 80039e0:	4b37      	ldr	r3, [pc, #220]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039ec:	4b35      	ldr	r3, [pc, #212]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe fa34 	bl	8001e64 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a00:	f7fe fa30 	bl	8001e64 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e355      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d035      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d02e      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a3c:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d114      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe f9f8 	bl	8001e64 <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fe f9f4 	bl	8001e64 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e317      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ee      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa6:	d111      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	4901      	ldr	r1, [pc, #4]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	0ffffcff 	.word	0x0ffffcff
 8003acc:	4bb0      	ldr	r3, [pc, #704]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4aaf      	ldr	r2, [pc, #700]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ad2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ad6:	6093      	str	r3, [r2, #8]
 8003ad8:	4bad      	ldr	r3, [pc, #692]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	49aa      	ldr	r1, [pc, #680]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003af6:	4ba6      	ldr	r3, [pc, #664]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	4aa4      	ldr	r2, [pc, #656]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b06:	4ba2      	ldr	r3, [pc, #648]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	499f      	ldr	r1, [pc, #636]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b24:	4b9a      	ldr	r3, [pc, #616]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	4997      	ldr	r1, [pc, #604]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b46:	4b92      	ldr	r3, [pc, #584]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b54:	498e      	ldr	r1, [pc, #568]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b68:	4b89      	ldr	r3, [pc, #548]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b76:	4986      	ldr	r1, [pc, #536]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b8a:	4b81      	ldr	r3, [pc, #516]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	497d      	ldr	r1, [pc, #500]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bac:	4b78      	ldr	r3, [pc, #480]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4975      	ldr	r1, [pc, #468]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bce:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f023 020c 	bic.w	r2, r3, #12
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	496c      	ldr	r1, [pc, #432]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	4964      	ldr	r1, [pc, #400]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c12:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	495b      	ldr	r1, [pc, #364]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c34:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	4953      	ldr	r1, [pc, #332]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c56:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	494a      	ldr	r1, [pc, #296]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	4942      	ldr	r1, [pc, #264]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca8:	4939      	ldr	r1, [pc, #228]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cca:	4931      	ldr	r1, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cec:	4928      	ldr	r1, [pc, #160]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	4918      	ldr	r1, [pc, #96]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d50:	490f      	ldr	r1, [pc, #60]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d66:	f040 80d8 	bne.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d76:	f7fe f875 	bl	8001e64 <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7e:	f7fe f871 	bl	8001e64 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d903      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e196      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003d90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d94:	4b6c      	ldr	r3, [pc, #432]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d021      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11d      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003db4:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dc2:	4b61      	ldr	r3, [pc, #388]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	019a      	lsls	r2, r3, #6
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	061b      	lsls	r3, r3, #24
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	071b      	lsls	r3, r3, #28
 8003de8:	4957      	ldr	r1, [pc, #348]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02e      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1a:	d129      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e1c:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e30:	0f1b      	lsrs	r3, r3, #28
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	019a      	lsls	r2, r3, #6
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	071b      	lsls	r3, r3, #28
 8003e50:	493d      	ldr	r1, [pc, #244]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e58:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5e:	f023 021f 	bic.w	r2, r3, #31
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	0e1b      	lsrs	r3, r3, #24
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e90:	0f1b      	lsrs	r3, r3, #28
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	019a      	lsls	r2, r3, #6
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	071b      	lsls	r3, r3, #28
 8003eb0:	4925      	ldr	r1, [pc, #148]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d011      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	061b      	lsls	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	4919      	ldr	r1, [pc, #100]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd ffb6 	bl	8001e64 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003efc:	f7fd ffb2 	bl	8001e64 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0d7      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 80cd 	bne.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fd ff99 	bl	8001e64 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f36:	f7fd ff95 	bl	8001e64 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d903      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0ba      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003f48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f58:	d0ed      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02e      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d12a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f90:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	019a      	lsls	r2, r3, #6
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	071b      	lsls	r3, r3, #28
 8003fb6:	4944      	ldr	r1, [pc, #272]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fbe:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	493d      	ldr	r1, [pc, #244]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d022      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fec:	d11d      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	0e1b      	lsrs	r3, r3, #24
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	0f1b      	lsrs	r3, r3, #28
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	019a      	lsls	r2, r3, #6
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	4929      	ldr	r1, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d028      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004036:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	0e1b      	lsrs	r3, r3, #24
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	019a      	lsls	r2, r3, #6
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	431a      	orrs	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4911      	ldr	r1, [pc, #68]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004094:	f7fd fee6 	bl	8001e64 <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800409c:	f7fd fee2 	bl	8001e64 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e007      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ba:	d1ef      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e01d      	b.n	800411a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fcea 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fbec 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_TIM_Base_Start_IT+0x50>)
 8004144:	4013      	ands	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b06      	cmp	r3, #6
 800414c:	d00b      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0x42>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d007      	beq.n	8004166 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	00010007 	.word	0x00010007

08004178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e01d      	b.n	80041c6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fc30 	bl	8001a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 fb96 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fe7e 	bl	8004ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_TIM_PWM_Start+0x7c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_TIM_PWM_Start+0x2c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIM_PWM_Start+0x80>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_TIM_PWM_Start+0x30>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_TIM_PWM_Start+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_TIM_PWM_Start+0x84>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d00b      	beq.n	8004240 <HAL_TIM_PWM_Start+0x70>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d007      	beq.n	8004240 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400
 8004254:	00010007 	.word	0x00010007

08004258 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e07b      	b.n	8004364 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd fbdf 	bl	8001a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_TIM_Encoder_Init+0x114>)
 800429a:	400b      	ands	r3, r1
 800429c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f000 fb1d 	bl	80048e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_TIM_Encoder_Init+0x118>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	4313      	orrs	r3, r2
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_TIM_Encoder_Init+0x11c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_TIM_Encoder_Init+0x120>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4313      	orrs	r3, r2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	011a      	lsls	r2, r3, #4
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	031b      	lsls	r3, r3, #12
 8004318:	4313      	orrs	r3, r2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4313      	orrs	r3, r2
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	fffebff8 	.word	0xfffebff8
 8004370:	fffffcfc 	.word	0xfffffcfc
 8004374:	fffff3f3 	.word	0xfffff3f3
 8004378:	ffff0f0f 	.word	0xffff0f0f

0800437c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_TIM_Encoder_Start_IT+0x16>
 800438c:	2b04      	cmp	r3, #4
 800438e:	d010      	beq.n	80043b2 <HAL_TIM_Encoder_Start_IT+0x36>
 8004390:	e01f      	b.n	80043d2 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fda2 	bl	8004ee4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0202 	orr.w	r2, r2, #2
 80043ae:	60da      	str	r2, [r3, #12]
      break;
 80043b0:	e02e      	b.n	8004410 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	2104      	movs	r1, #4
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fd92 	bl	8004ee4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0204 	orr.w	r2, r2, #4
 80043ce:	60da      	str	r2, [r3, #12]
      break;
 80043d0:	e01e      	b.n	8004410 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fd82 	bl	8004ee4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	2104      	movs	r1, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fd7b 	bl	8004ee4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0202 	orr.w	r2, r2, #2
 80043fc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0204 	orr.w	r2, r2, #4
 800440c:	60da      	str	r2, [r3, #12]
      break;
 800440e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d122      	bne.n	8004486 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d11b      	bne.n	8004486 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0202 	mvn.w	r2, #2
 8004456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa1d 	bl	80048ac <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fa0f 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa20 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d122      	bne.n	80044da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d11b      	bne.n	80044da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0204 	mvn.w	r2, #4
 80044aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f9f3 	bl	80048ac <HAL_TIM_IC_CaptureCallback>
 80044c6:	e005      	b.n	80044d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f9e5 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9f6 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d122      	bne.n	800452e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d11b      	bne.n	800452e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0208 	mvn.w	r2, #8
 80044fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2204      	movs	r2, #4
 8004504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f9c9 	bl	80048ac <HAL_TIM_IC_CaptureCallback>
 800451a:	e005      	b.n	8004528 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9bb 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9cc 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d122      	bne.n	8004582 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d11b      	bne.n	8004582 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0210 	mvn.w	r2, #16
 8004552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2208      	movs	r2, #8
 8004558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f99f 	bl	80048ac <HAL_TIM_IC_CaptureCallback>
 800456e:	e005      	b.n	800457c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f991 	bl	8004898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9a2 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0201 	mvn.w	r2, #1
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fd41 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fd43 	bl	8005060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fd36 	bl	8005074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f950 	bl	80048d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d10e      	bne.n	8004660 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d107      	bne.n	8004660 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0220 	mvn.w	r2, #32
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fcf6 	bl	800504c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800467e:	2302      	movs	r3, #2
 8004680:	e105      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b14      	cmp	r3, #20
 8004696:	f200 80f0 	bhi.w	800487a <HAL_TIM_PWM_ConfigChannel+0x212>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	0800487b 	.word	0x0800487b
 80046a8:	0800487b 	.word	0x0800487b
 80046ac:	0800487b 	.word	0x0800487b
 80046b0:	08004735 	.word	0x08004735
 80046b4:	0800487b 	.word	0x0800487b
 80046b8:	0800487b 	.word	0x0800487b
 80046bc:	0800487b 	.word	0x0800487b
 80046c0:	08004777 	.word	0x08004777
 80046c4:	0800487b 	.word	0x0800487b
 80046c8:	0800487b 	.word	0x0800487b
 80046cc:	0800487b 	.word	0x0800487b
 80046d0:	080047b7 	.word	0x080047b7
 80046d4:	0800487b 	.word	0x0800487b
 80046d8:	0800487b 	.word	0x0800487b
 80046dc:	0800487b 	.word	0x0800487b
 80046e0:	080047f9 	.word	0x080047f9
 80046e4:	0800487b 	.word	0x0800487b
 80046e8:	0800487b 	.word	0x0800487b
 80046ec:	0800487b 	.word	0x0800487b
 80046f0:	08004839 	.word	0x08004839
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f994 	bl	8004a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0208 	orr.w	r2, r2, #8
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0204 	bic.w	r2, r2, #4
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	619a      	str	r2, [r3, #24]
      break;
 8004732:	e0a3      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f9e6 	bl	8004b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800474e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6999      	ldr	r1, [r3, #24]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	021a      	lsls	r2, r3, #8
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	619a      	str	r2, [r3, #24]
      break;
 8004774:	e082      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fa3d 	bl	8004bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0208 	orr.w	r2, r2, #8
 8004790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0204 	bic.w	r2, r2, #4
 80047a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	61da      	str	r2, [r3, #28]
      break;
 80047b4:	e062      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa93 	bl	8004ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	021a      	lsls	r2, r3, #8
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]
      break;
 80047f6:	e041      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 faca 	bl	8004d98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004836:	e021      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fafc 	bl	8004e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800487a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop

08004898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d02b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d027      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d023      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01f      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <TIM_Base_SetConfig+0x134>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <TIM_Base_SetConfig+0x138>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a23      	ldr	r2, [pc, #140]	; (8004a24 <TIM_Base_SetConfig+0x13c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	40001800 	.word	0x40001800
 8004a20:	40001c00 	.word	0x40001c00
 8004a24:	40002000 	.word	0x40002000

08004a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0201 	bic.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <TIM_OC1_SetConfig+0xd8>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0302 	bic.w	r3, r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <TIM_OC1_SetConfig+0xdc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC1_SetConfig+0x64>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <TIM_OC1_SetConfig+0xe0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10c      	bne.n	8004aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0308 	bic.w	r3, r3, #8
 8004a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 0304 	bic.w	r3, r3, #4
 8004aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <TIM_OC1_SetConfig+0xdc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC1_SetConfig+0x8e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <TIM_OC1_SetConfig+0xe0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d111      	bne.n	8004ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	fffeff8f 	.word	0xfffeff8f
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400

08004b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4b2e      	ldr	r3, [pc, #184]	; (8004bf0 <TIM_OC2_SetConfig+0xe4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0320 	bic.w	r3, r3, #32
 8004b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a23      	ldr	r2, [pc, #140]	; (8004bf4 <TIM_OC2_SetConfig+0xe8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_OC2_SetConfig+0x68>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <TIM_OC2_SetConfig+0xec>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10d      	bne.n	8004b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <TIM_OC2_SetConfig+0xe8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x94>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <TIM_OC2_SetConfig+0xec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d113      	bne.n	8004bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	feff8fff 	.word	0xfeff8fff
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010400 	.word	0x40010400

08004bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <TIM_OC3_SetConfig+0xe0>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <TIM_OC3_SetConfig+0xe4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_OC3_SetConfig+0x66>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <TIM_OC3_SetConfig+0xe8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10d      	bne.n	8004c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <TIM_OC3_SetConfig+0xe4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC3_SetConfig+0x92>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC3_SetConfig+0xe8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	fffeff8f 	.word	0xfffeff8f
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <TIM_OC4_SetConfig+0xa4>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	031b      	lsls	r3, r3, #12
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <TIM_OC4_SetConfig+0xa8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC4_SetConfig+0x68>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_OC4_SetConfig+0xac>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d109      	bne.n	8004d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	feff8fff 	.word	0xfeff8fff
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40010400 	.word	0x40010400

08004d98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <TIM_OC5_SetConfig+0x98>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <TIM_OC5_SetConfig+0x9c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC5_SetConfig+0x5e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <TIM_OC5_SetConfig+0xa0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d109      	bne.n	8004e0a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	fffeff8f 	.word	0xfffeff8f
 8004e34:	40010000 	.word	0x40010000
 8004e38:	40010400 	.word	0x40010400

08004e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <TIM_OC6_SetConfig+0x9c>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_OC6_SetConfig+0xa0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC6_SetConfig+0x60>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <TIM_OC6_SetConfig+0xa4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	feff8fff 	.word	0xfeff8fff
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e06d      	b.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d022      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d01d      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d018      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10c      	bne.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000
 8005048:	40001800 	.word	0x40001800

0800504c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e040      	b.n	800511c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fd8a 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 faa6 	bl	8005618 <UART_SetConfig>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e022      	b.n	800511c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fd44 	bl	8005b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fdcb 	bl	8005cb0 <UART_CheckIdleState>
 800511a:	4603      	mov	r3, r0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	2b20      	cmp	r3, #32
 800513a:	d17f      	bne.n	800523c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_UART_Transmit+0x24>
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e078      	b.n	800523e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UART_Transmit+0x36>
 8005156:	2302      	movs	r3, #2
 8005158:	e071      	b.n	800523e <HAL_UART_Transmit+0x11a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2221      	movs	r2, #33	; 0x21
 800516c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800516e:	f7fc fe79 	bl	8001e64 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d108      	bne.n	80051a0 <HAL_UART_Transmit+0x7c>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e003      	b.n	80051a8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80051b0:	e02c      	b.n	800520c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2180      	movs	r1, #128	; 0x80
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fda6 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e038      	b.n	800523e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	3302      	adds	r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e007      	b.n	80051fa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	3301      	adds	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cc      	bne.n	80051b2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2200      	movs	r2, #0
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fd73 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e005      	b.n	800523e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
  }
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525a:	2b20      	cmp	r3, #32
 800525c:	f040 808a 	bne.w	8005374 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Receive_IT+0x24>
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e082      	b.n	8005376 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Receive_IT+0x36>
 800527a:	2302      	movs	r3, #2
 800527c:	e07b      	b.n	8005376 <HAL_UART_Receive_IT+0x12e>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d10e      	bne.n	80052ca <HAL_UART_Receive_IT+0x82>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_UART_Receive_IT+0x78>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052be:	e02d      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c8:	e028      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_UART_Receive_IT+0xa6>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Receive_IT+0x9c>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e2:	e01b      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	227f      	movs	r2, #127	; 0x7f
 80052e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ec:	e016      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d10d      	bne.n	8005314 <HAL_UART_Receive_IT+0xcc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_Receive_IT+0xc2>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	227f      	movs	r2, #127	; 0x7f
 8005304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005308:	e008      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	223f      	movs	r2, #63	; 0x3f
 800530e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005312:	e003      	b.n	800531c <HAL_UART_Receive_IT+0xd4>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2222      	movs	r2, #34	; 0x22
 8005326:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d107      	bne.n	8005352 <HAL_UART_Receive_IT+0x10a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <HAL_UART_Receive_IT+0x13c>)
 800534e:	661a      	str	r2, [r3, #96]	; 0x60
 8005350:	e002      	b.n	8005358 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <HAL_UART_Receive_IT+0x140>)
 8005356:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800536e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	08005f49 	.word	0x08005f49
 8005388:	08005ea3 	.word	0x08005ea3

0800538c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d113      	bne.n	80053e4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8100 	beq.w	80055da <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      }
      return;
 80053e2:	e0fa      	b.n	80055da <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80d5 	beq.w	8005596 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80ca 	beq.w	8005596 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00e      	beq.n	800542a <HAL_UART_IRQHandler+0x9e>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_UART_IRQHandler+0xc6>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2202      	movs	r2, #2
 8005444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	f043 0204 	orr.w	r2, r3, #4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <HAL_UART_IRQHandler+0xee>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2204      	movs	r2, #4
 800546c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005472:	f043 0202 	orr.w	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a4:	f043 0208 	orr.w	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00f      	beq.n	80054d6 <HAL_UART_IRQHandler+0x14a>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d07f      	beq.n	80055de <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00c      	beq.n	8005502 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005506:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d004      	beq.n	8005520 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800551c:	2b00      	cmp	r3, #0
 800551e:	d031      	beq.n	8005584 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fc6f 	bl	8005e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d123      	bne.n	800557c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d013      	beq.n	8005574 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005550:	4a26      	ldr	r2, [pc, #152]	; (80055ec <HAL_UART_IRQHandler+0x260>)
 8005552:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc fdc2 	bl	80020e2 <HAL_DMA_Abort_IT>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800556e:	4610      	mov	r0, r2
 8005570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005572:	e00e      	b.n	8005592 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f845 	bl	8005604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557a:	e00a      	b.n	8005592 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f841 	bl	8005604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005582:	e006      	b.n	8005592 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f83d 	bl	8005604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005590:	e025      	b.n	80055de <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	bf00      	nop
    return;
 8005594:	e023      	b.n	80055de <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d017      	beq.n	80055e2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
    }
    return;
 80055ba:	e012      	b.n	80055e2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <HAL_UART_IRQHandler+0x258>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fc4d 	bl	8005e70 <UART_EndTransmit_IT>
    return;
 80055d6:	bf00      	nop
 80055d8:	e004      	b.n	80055e4 <HAL_UART_IRQHandler+0x258>
      return;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <HAL_UART_IRQHandler+0x258>
    return;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_UART_IRQHandler+0x258>
    return;
 80055e2:	bf00      	nop
  }

}
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	08005e45 	.word	0x08005e45

080055f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4bb1      	ldr	r3, [pc, #708]	; (800590c <UART_SetConfig+0x2f4>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	430b      	orrs	r3, r1
 8005652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a9f      	ldr	r2, [pc, #636]	; (8005910 <UART_SetConfig+0x2f8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d121      	bne.n	80056dc <UART_SetConfig+0xc4>
 8005698:	4b9e      	ldr	r3, [pc, #632]	; (8005914 <UART_SetConfig+0x2fc>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d816      	bhi.n	80056d4 <UART_SetConfig+0xbc>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x94>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056c3 	.word	0x080056c3
 80056b8:	080056cf 	.word	0x080056cf
 80056bc:	2301      	movs	r3, #1
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e151      	b.n	8005966 <UART_SetConfig+0x34e>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e14e      	b.n	8005966 <UART_SetConfig+0x34e>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e14b      	b.n	8005966 <UART_SetConfig+0x34e>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e148      	b.n	8005966 <UART_SetConfig+0x34e>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	bf00      	nop
 80056da:	e144      	b.n	8005966 <UART_SetConfig+0x34e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a8d      	ldr	r2, [pc, #564]	; (8005918 <UART_SetConfig+0x300>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d134      	bne.n	8005750 <UART_SetConfig+0x138>
 80056e6:	4b8b      	ldr	r3, [pc, #556]	; (8005914 <UART_SetConfig+0x2fc>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b0c      	cmp	r3, #12
 80056f2:	d829      	bhi.n	8005748 <UART_SetConfig+0x130>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0xe4>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005749 	.word	0x08005749
 8005704:	08005749 	.word	0x08005749
 8005708:	08005749 	.word	0x08005749
 800570c:	0800573d 	.word	0x0800573d
 8005710:	08005749 	.word	0x08005749
 8005714:	08005749 	.word	0x08005749
 8005718:	08005749 	.word	0x08005749
 800571c:	08005737 	.word	0x08005737
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	08005743 	.word	0x08005743
 8005730:	2300      	movs	r3, #0
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e117      	b.n	8005966 <UART_SetConfig+0x34e>
 8005736:	2302      	movs	r3, #2
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e114      	b.n	8005966 <UART_SetConfig+0x34e>
 800573c:	2304      	movs	r3, #4
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e111      	b.n	8005966 <UART_SetConfig+0x34e>
 8005742:	2308      	movs	r3, #8
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e10e      	b.n	8005966 <UART_SetConfig+0x34e>
 8005748:	2310      	movs	r3, #16
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	bf00      	nop
 800574e:	e10a      	b.n	8005966 <UART_SetConfig+0x34e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a71      	ldr	r2, [pc, #452]	; (800591c <UART_SetConfig+0x304>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d120      	bne.n	800579c <UART_SetConfig+0x184>
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <UART_SetConfig+0x2fc>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005764:	2b10      	cmp	r3, #16
 8005766:	d00f      	beq.n	8005788 <UART_SetConfig+0x170>
 8005768:	2b10      	cmp	r3, #16
 800576a:	d802      	bhi.n	8005772 <UART_SetConfig+0x15a>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <UART_SetConfig+0x164>
 8005770:	e010      	b.n	8005794 <UART_SetConfig+0x17c>
 8005772:	2b20      	cmp	r3, #32
 8005774:	d005      	beq.n	8005782 <UART_SetConfig+0x16a>
 8005776:	2b30      	cmp	r3, #48	; 0x30
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x176>
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x17c>
 800577c:	2300      	movs	r3, #0
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e0f1      	b.n	8005966 <UART_SetConfig+0x34e>
 8005782:	2302      	movs	r3, #2
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e0ee      	b.n	8005966 <UART_SetConfig+0x34e>
 8005788:	2304      	movs	r3, #4
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e0eb      	b.n	8005966 <UART_SetConfig+0x34e>
 800578e:	2308      	movs	r3, #8
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e0e8      	b.n	8005966 <UART_SetConfig+0x34e>
 8005794:	2310      	movs	r3, #16
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	bf00      	nop
 800579a:	e0e4      	b.n	8005966 <UART_SetConfig+0x34e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a5f      	ldr	r2, [pc, #380]	; (8005920 <UART_SetConfig+0x308>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d120      	bne.n	80057e8 <UART_SetConfig+0x1d0>
 80057a6:	4b5b      	ldr	r3, [pc, #364]	; (8005914 <UART_SetConfig+0x2fc>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d00f      	beq.n	80057d4 <UART_SetConfig+0x1bc>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d802      	bhi.n	80057be <UART_SetConfig+0x1a6>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0x1b0>
 80057bc:	e010      	b.n	80057e0 <UART_SetConfig+0x1c8>
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d005      	beq.n	80057ce <UART_SetConfig+0x1b6>
 80057c2:	2bc0      	cmp	r3, #192	; 0xc0
 80057c4:	d009      	beq.n	80057da <UART_SetConfig+0x1c2>
 80057c6:	e00b      	b.n	80057e0 <UART_SetConfig+0x1c8>
 80057c8:	2300      	movs	r3, #0
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e0cb      	b.n	8005966 <UART_SetConfig+0x34e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e0c8      	b.n	8005966 <UART_SetConfig+0x34e>
 80057d4:	2304      	movs	r3, #4
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e0c5      	b.n	8005966 <UART_SetConfig+0x34e>
 80057da:	2308      	movs	r3, #8
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e0c2      	b.n	8005966 <UART_SetConfig+0x34e>
 80057e0:	2310      	movs	r3, #16
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	bf00      	nop
 80057e6:	e0be      	b.n	8005966 <UART_SetConfig+0x34e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a4d      	ldr	r2, [pc, #308]	; (8005924 <UART_SetConfig+0x30c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d124      	bne.n	800583c <UART_SetConfig+0x224>
 80057f2:	4b48      	ldr	r3, [pc, #288]	; (8005914 <UART_SetConfig+0x2fc>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005800:	d012      	beq.n	8005828 <UART_SetConfig+0x210>
 8005802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005806:	d802      	bhi.n	800580e <UART_SetConfig+0x1f6>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <UART_SetConfig+0x204>
 800580c:	e012      	b.n	8005834 <UART_SetConfig+0x21c>
 800580e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005812:	d006      	beq.n	8005822 <UART_SetConfig+0x20a>
 8005814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005818:	d009      	beq.n	800582e <UART_SetConfig+0x216>
 800581a:	e00b      	b.n	8005834 <UART_SetConfig+0x21c>
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e0a1      	b.n	8005966 <UART_SetConfig+0x34e>
 8005822:	2302      	movs	r3, #2
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e09e      	b.n	8005966 <UART_SetConfig+0x34e>
 8005828:	2304      	movs	r3, #4
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e09b      	b.n	8005966 <UART_SetConfig+0x34e>
 800582e:	2308      	movs	r3, #8
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e098      	b.n	8005966 <UART_SetConfig+0x34e>
 8005834:	2310      	movs	r3, #16
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	bf00      	nop
 800583a:	e094      	b.n	8005966 <UART_SetConfig+0x34e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a39      	ldr	r2, [pc, #228]	; (8005928 <UART_SetConfig+0x310>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d124      	bne.n	8005890 <UART_SetConfig+0x278>
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <UART_SetConfig+0x2fc>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005854:	d012      	beq.n	800587c <UART_SetConfig+0x264>
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585a:	d802      	bhi.n	8005862 <UART_SetConfig+0x24a>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <UART_SetConfig+0x258>
 8005860:	e012      	b.n	8005888 <UART_SetConfig+0x270>
 8005862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005866:	d006      	beq.n	8005876 <UART_SetConfig+0x25e>
 8005868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800586c:	d009      	beq.n	8005882 <UART_SetConfig+0x26a>
 800586e:	e00b      	b.n	8005888 <UART_SetConfig+0x270>
 8005870:	2301      	movs	r3, #1
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e077      	b.n	8005966 <UART_SetConfig+0x34e>
 8005876:	2302      	movs	r3, #2
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e074      	b.n	8005966 <UART_SetConfig+0x34e>
 800587c:	2304      	movs	r3, #4
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e071      	b.n	8005966 <UART_SetConfig+0x34e>
 8005882:	2308      	movs	r3, #8
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e06e      	b.n	8005966 <UART_SetConfig+0x34e>
 8005888:	2310      	movs	r3, #16
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	bf00      	nop
 800588e:	e06a      	b.n	8005966 <UART_SetConfig+0x34e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <UART_SetConfig+0x314>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d124      	bne.n	80058e4 <UART_SetConfig+0x2cc>
 800589a:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <UART_SetConfig+0x2fc>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d012      	beq.n	80058d0 <UART_SetConfig+0x2b8>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	d802      	bhi.n	80058b6 <UART_SetConfig+0x29e>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <UART_SetConfig+0x2ac>
 80058b4:	e012      	b.n	80058dc <UART_SetConfig+0x2c4>
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ba:	d006      	beq.n	80058ca <UART_SetConfig+0x2b2>
 80058bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058c0:	d009      	beq.n	80058d6 <UART_SetConfig+0x2be>
 80058c2:	e00b      	b.n	80058dc <UART_SetConfig+0x2c4>
 80058c4:	2300      	movs	r3, #0
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e04d      	b.n	8005966 <UART_SetConfig+0x34e>
 80058ca:	2302      	movs	r3, #2
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e04a      	b.n	8005966 <UART_SetConfig+0x34e>
 80058d0:	2304      	movs	r3, #4
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e047      	b.n	8005966 <UART_SetConfig+0x34e>
 80058d6:	2308      	movs	r3, #8
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e044      	b.n	8005966 <UART_SetConfig+0x34e>
 80058dc:	2310      	movs	r3, #16
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	bf00      	nop
 80058e2:	e040      	b.n	8005966 <UART_SetConfig+0x34e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <UART_SetConfig+0x318>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d139      	bne.n	8005962 <UART_SetConfig+0x34a>
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <UART_SetConfig+0x2fc>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058fc:	d027      	beq.n	800594e <UART_SetConfig+0x336>
 80058fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005902:	d817      	bhi.n	8005934 <UART_SetConfig+0x31c>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <UART_SetConfig+0x32a>
 8005908:	e027      	b.n	800595a <UART_SetConfig+0x342>
 800590a:	bf00      	nop
 800590c:	efff69f3 	.word	0xefff69f3
 8005910:	40011000 	.word	0x40011000
 8005914:	40023800 	.word	0x40023800
 8005918:	40004400 	.word	0x40004400
 800591c:	40004800 	.word	0x40004800
 8005920:	40004c00 	.word	0x40004c00
 8005924:	40005000 	.word	0x40005000
 8005928:	40011400 	.word	0x40011400
 800592c:	40007800 	.word	0x40007800
 8005930:	40007c00 	.word	0x40007c00
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005938:	d006      	beq.n	8005948 <UART_SetConfig+0x330>
 800593a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800593e:	d009      	beq.n	8005954 <UART_SetConfig+0x33c>
 8005940:	e00b      	b.n	800595a <UART_SetConfig+0x342>
 8005942:	2300      	movs	r3, #0
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e00e      	b.n	8005966 <UART_SetConfig+0x34e>
 8005948:	2302      	movs	r3, #2
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e00b      	b.n	8005966 <UART_SetConfig+0x34e>
 800594e:	2304      	movs	r3, #4
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e008      	b.n	8005966 <UART_SetConfig+0x34e>
 8005954:	2308      	movs	r3, #8
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e005      	b.n	8005966 <UART_SetConfig+0x34e>
 800595a:	2310      	movs	r3, #16
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	bf00      	nop
 8005960:	e001      	b.n	8005966 <UART_SetConfig+0x34e>
 8005962:	2310      	movs	r3, #16
 8005964:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d17f      	bne.n	8005a70 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005970:	7ffb      	ldrb	r3, [r7, #31]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d85c      	bhi.n	8005a30 <UART_SetConfig+0x418>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0x364>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059c1 	.word	0x080059c1
 8005984:	080059e1 	.word	0x080059e1
 8005988:	08005a31 	.word	0x08005a31
 800598c:	080059f9 	.word	0x080059f9
 8005990:	08005a31 	.word	0x08005a31
 8005994:	08005a31 	.word	0x08005a31
 8005998:	08005a31 	.word	0x08005a31
 800599c:	08005a19 	.word	0x08005a19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a0:	f7fd ff7e 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80059a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	005a      	lsls	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	61bb      	str	r3, [r7, #24]
        break;
 80059be:	e03a      	b.n	8005a36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c0:	f7fd ff82 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 80059c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	005a      	lsls	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	61bb      	str	r3, [r7, #24]
        break;
 80059de:	e02a      	b.n	8005a36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	085a      	lsrs	r2, r3, #1
 80059e6:	4b5f      	ldr	r3, [pc, #380]	; (8005b64 <UART_SetConfig+0x54c>)
 80059e8:	4413      	add	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6852      	ldr	r2, [r2, #4]
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	61bb      	str	r3, [r7, #24]
        break;
 80059f6:	e01e      	b.n	8005a36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f8:	f7fd fe6e 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80059fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	005a      	lsls	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	61bb      	str	r3, [r7, #24]
        break;
 8005a16:	e00e      	b.n	8005a36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	61bb      	str	r3, [r7, #24]
        break;
 8005a2e:	e002      	b.n	8005a36 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
        break;
 8005a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b0f      	cmp	r3, #15
 8005a3a:	d916      	bls.n	8005a6a <UART_SetConfig+0x452>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a42:	d212      	bcs.n	8005a6a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f023 030f 	bic.w	r3, r3, #15
 8005a4c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	897b      	ldrh	r3, [r7, #10]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	897a      	ldrh	r2, [r7, #10]
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	e070      	b.n	8005b4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
 8005a6e:	e06d      	b.n	8005b4c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d859      	bhi.n	8005b2a <UART_SetConfig+0x512>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x464>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005abf 	.word	0x08005abf
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005b2b 	.word	0x08005b2b
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	08005b2b 	.word	0x08005b2b
 8005a94:	08005b2b 	.word	0x08005b2b
 8005a98:	08005b2b 	.word	0x08005b2b
 8005a9c:	08005b13 	.word	0x08005b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa0:	f7fd fefe 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8005aa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	085a      	lsrs	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	441a      	add	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	61bb      	str	r3, [r7, #24]
        break;
 8005abc:	e038      	b.n	8005b30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fd ff03 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8005ac2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085a      	lsrs	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	441a      	add	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	61bb      	str	r3, [r7, #24]
        break;
 8005ada:	e029      	b.n	8005b30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	085a      	lsrs	r2, r3, #1
 8005ae2:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <UART_SetConfig+0x550>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6852      	ldr	r2, [r2, #4]
 8005aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	61bb      	str	r3, [r7, #24]
        break;
 8005af2:	e01d      	b.n	8005b30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af4:	f7fd fdf0 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8005af8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	085a      	lsrs	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	441a      	add	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	61bb      	str	r3, [r7, #24]
        break;
 8005b10:	e00e      	b.n	8005b30 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	61bb      	str	r3, [r7, #24]
        break;
 8005b28:	e002      	b.n	8005b30 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
        break;
 8005b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b0f      	cmp	r3, #15
 8005b34:	d908      	bls.n	8005b48 <UART_SetConfig+0x530>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d204      	bcs.n	8005b48 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e001      	b.n	8005b4c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	01e84800 	.word	0x01e84800
 8005b68:	00f42400 	.word	0x00f42400

08005b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6a:	d10a      	bne.n	8005c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005cbe:	f7fc f8d1 	bl	8001e64 <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d10e      	bne.n	8005cf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f814 	bl	8005d0e <UART_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e00a      	b.n	8005d06 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	e05d      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d059      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fc f89c 	bl	8001e64 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11b      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e042      	b.n	8005dfc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d02b      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d92:	d123      	bne.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e00f      	b.n	8005dfc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d092      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e1a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff fbce 	bl	8005604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fbab 	bl	80055f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005eb0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	2b22      	cmp	r3, #34	; 0x22
 8005eb8:	d13a      	bne.n	8005f30 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ec2:	89bb      	ldrh	r3, [r7, #12]
 8005ec4:	b2d9      	uxtb	r1, r3
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	400a      	ands	r2, r1
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d121      	bne.n	8005f40 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fb f8ef 	bl	800110c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f2e:	e007      	b.n	8005f40 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	619a      	str	r2, [r3, #24]
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f56:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5c:	2b22      	cmp	r3, #34	; 0x22
 8005f5e:	d13a      	bne.n	8005fd6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f6e:	89ba      	ldrh	r2, [r7, #12]
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	4013      	ands	r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fb0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fb f89c 	bl	800110c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fd4:	e007      	b.n	8005fe6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	619a      	str	r2, [r3, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <__errno>:
 8005ff0:	4b01      	ldr	r3, [pc, #4]	; (8005ff8 <__errno+0x8>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000024 	.word	0x20000024

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0d      	ldr	r6, [pc, #52]	; (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	; (8006038 <__libc_init_array+0x3c>)
 8006002:	1ba4      	subs	r4, r4, r6
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2500      	movs	r5, #0
 8006008:	42a5      	cmp	r5, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4e0b      	ldr	r6, [pc, #44]	; (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	; (8006040 <__libc_init_array+0x44>)
 8006010:	f000 fc26 	bl	8006860 <_init>
 8006014:	1ba4      	subs	r4, r4, r6
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2500      	movs	r5, #0
 800601a:	42a5      	cmp	r5, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006024:	4798      	blx	r3
 8006026:	3501      	adds	r5, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800602e:	4798      	blx	r3
 8006030:	3501      	adds	r5, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08006904 	.word	0x08006904
 8006038:	08006904 	.word	0x08006904
 800603c:	08006904 	.word	0x08006904
 8006040:	08006908 	.word	0x08006908

08006044 <memset>:
 8006044:	4402      	add	r2, r0
 8006046:	4603      	mov	r3, r0
 8006048:	4293      	cmp	r3, r2
 800604a:	d100      	bne.n	800604e <memset+0xa>
 800604c:	4770      	bx	lr
 800604e:	f803 1b01 	strb.w	r1, [r3], #1
 8006052:	e7f9      	b.n	8006048 <memset+0x4>

08006054 <siprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b500      	push	{lr}
 8006058:	b09c      	sub	sp, #112	; 0x70
 800605a:	ab1d      	add	r3, sp, #116	; 0x74
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <siprintf+0x38>)
 8006066:	9107      	str	r1, [sp, #28]
 8006068:	9104      	str	r1, [sp, #16]
 800606a:	4909      	ldr	r1, [pc, #36]	; (8006090 <siprintf+0x3c>)
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	a902      	add	r1, sp, #8
 8006078:	f000 f866 	bl	8006148 <_svfiprintf_r>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	b01c      	add	sp, #112	; 0x70
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b003      	add	sp, #12
 800608a:	4770      	bx	lr
 800608c:	20000024 	.word	0x20000024
 8006090:	ffff0208 	.word	0xffff0208

08006094 <__ssputs_r>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	688e      	ldr	r6, [r1, #8]
 800609a:	429e      	cmp	r6, r3
 800609c:	4682      	mov	sl, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4690      	mov	r8, r2
 80060a2:	4699      	mov	r9, r3
 80060a4:	d837      	bhi.n	8006116 <__ssputs_r+0x82>
 80060a6:	898a      	ldrh	r2, [r1, #12]
 80060a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060ac:	d031      	beq.n	8006112 <__ssputs_r+0x7e>
 80060ae:	6825      	ldr	r5, [r4, #0]
 80060b0:	6909      	ldr	r1, [r1, #16]
 80060b2:	1a6f      	subs	r7, r5, r1
 80060b4:	6965      	ldr	r5, [r4, #20]
 80060b6:	2302      	movs	r3, #2
 80060b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80060c0:	f109 0301 	add.w	r3, r9, #1
 80060c4:	443b      	add	r3, r7
 80060c6:	429d      	cmp	r5, r3
 80060c8:	bf38      	it	cc
 80060ca:	461d      	movcc	r5, r3
 80060cc:	0553      	lsls	r3, r2, #21
 80060ce:	d530      	bpl.n	8006132 <__ssputs_r+0x9e>
 80060d0:	4629      	mov	r1, r5
 80060d2:	f000 fb2b 	bl	800672c <_malloc_r>
 80060d6:	4606      	mov	r6, r0
 80060d8:	b950      	cbnz	r0, 80060f0 <__ssputs_r+0x5c>
 80060da:	230c      	movs	r3, #12
 80060dc:	f8ca 3000 	str.w	r3, [sl]
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f0:	463a      	mov	r2, r7
 80060f2:	6921      	ldr	r1, [r4, #16]
 80060f4:	f000 faa8 	bl	8006648 <memcpy>
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	6126      	str	r6, [r4, #16]
 8006106:	6165      	str	r5, [r4, #20]
 8006108:	443e      	add	r6, r7
 800610a:	1bed      	subs	r5, r5, r7
 800610c:	6026      	str	r6, [r4, #0]
 800610e:	60a5      	str	r5, [r4, #8]
 8006110:	464e      	mov	r6, r9
 8006112:	454e      	cmp	r6, r9
 8006114:	d900      	bls.n	8006118 <__ssputs_r+0x84>
 8006116:	464e      	mov	r6, r9
 8006118:	4632      	mov	r2, r6
 800611a:	4641      	mov	r1, r8
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	f000 fa9e 	bl	800665e <memmove>
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	1b9b      	subs	r3, r3, r6
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	441e      	add	r6, r3
 800612c:	6026      	str	r6, [r4, #0]
 800612e:	2000      	movs	r0, #0
 8006130:	e7dc      	b.n	80060ec <__ssputs_r+0x58>
 8006132:	462a      	mov	r2, r5
 8006134:	f000 fb54 	bl	80067e0 <_realloc_r>
 8006138:	4606      	mov	r6, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d1e2      	bne.n	8006104 <__ssputs_r+0x70>
 800613e:	6921      	ldr	r1, [r4, #16]
 8006140:	4650      	mov	r0, sl
 8006142:	f000 faa5 	bl	8006690 <_free_r>
 8006146:	e7c8      	b.n	80060da <__ssputs_r+0x46>

08006148 <_svfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	461d      	mov	r5, r3
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	061f      	lsls	r7, r3, #24
 8006152:	b09d      	sub	sp, #116	; 0x74
 8006154:	4680      	mov	r8, r0
 8006156:	460c      	mov	r4, r1
 8006158:	4616      	mov	r6, r2
 800615a:	d50f      	bpl.n	800617c <_svfiprintf_r+0x34>
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	b96b      	cbnz	r3, 800617c <_svfiprintf_r+0x34>
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	f000 fae3 	bl	800672c <_malloc_r>
 8006166:	6020      	str	r0, [r4, #0]
 8006168:	6120      	str	r0, [r4, #16]
 800616a:	b928      	cbnz	r0, 8006178 <_svfiprintf_r+0x30>
 800616c:	230c      	movs	r3, #12
 800616e:	f8c8 3000 	str.w	r3, [r8]
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	e0c8      	b.n	800630a <_svfiprintf_r+0x1c2>
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	6163      	str	r3, [r4, #20]
 800617c:	2300      	movs	r3, #0
 800617e:	9309      	str	r3, [sp, #36]	; 0x24
 8006180:	2320      	movs	r3, #32
 8006182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006186:	2330      	movs	r3, #48	; 0x30
 8006188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800618c:	9503      	str	r5, [sp, #12]
 800618e:	f04f 0b01 	mov.w	fp, #1
 8006192:	4637      	mov	r7, r6
 8006194:	463d      	mov	r5, r7
 8006196:	f815 3b01 	ldrb.w	r3, [r5], #1
 800619a:	b10b      	cbz	r3, 80061a0 <_svfiprintf_r+0x58>
 800619c:	2b25      	cmp	r3, #37	; 0x25
 800619e:	d13e      	bne.n	800621e <_svfiprintf_r+0xd6>
 80061a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80061a4:	d00b      	beq.n	80061be <_svfiprintf_r+0x76>
 80061a6:	4653      	mov	r3, sl
 80061a8:	4632      	mov	r2, r6
 80061aa:	4621      	mov	r1, r4
 80061ac:	4640      	mov	r0, r8
 80061ae:	f7ff ff71 	bl	8006094 <__ssputs_r>
 80061b2:	3001      	adds	r0, #1
 80061b4:	f000 80a4 	beq.w	8006300 <_svfiprintf_r+0x1b8>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	4453      	add	r3, sl
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	783b      	ldrb	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 809d 	beq.w	8006300 <_svfiprintf_r+0x1b8>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	9307      	str	r3, [sp, #28]
 80061d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061d8:	931a      	str	r3, [sp, #104]	; 0x68
 80061da:	462f      	mov	r7, r5
 80061dc:	2205      	movs	r2, #5
 80061de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80061e2:	4850      	ldr	r0, [pc, #320]	; (8006324 <_svfiprintf_r+0x1dc>)
 80061e4:	f7fa f814 	bl	8000210 <memchr>
 80061e8:	9b04      	ldr	r3, [sp, #16]
 80061ea:	b9d0      	cbnz	r0, 8006222 <_svfiprintf_r+0xda>
 80061ec:	06d9      	lsls	r1, r3, #27
 80061ee:	bf44      	itt	mi
 80061f0:	2220      	movmi	r2, #32
 80061f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061f6:	071a      	lsls	r2, r3, #28
 80061f8:	bf44      	itt	mi
 80061fa:	222b      	movmi	r2, #43	; 0x2b
 80061fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006200:	782a      	ldrb	r2, [r5, #0]
 8006202:	2a2a      	cmp	r2, #42	; 0x2a
 8006204:	d015      	beq.n	8006232 <_svfiprintf_r+0xea>
 8006206:	9a07      	ldr	r2, [sp, #28]
 8006208:	462f      	mov	r7, r5
 800620a:	2000      	movs	r0, #0
 800620c:	250a      	movs	r5, #10
 800620e:	4639      	mov	r1, r7
 8006210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006214:	3b30      	subs	r3, #48	; 0x30
 8006216:	2b09      	cmp	r3, #9
 8006218:	d94d      	bls.n	80062b6 <_svfiprintf_r+0x16e>
 800621a:	b1b8      	cbz	r0, 800624c <_svfiprintf_r+0x104>
 800621c:	e00f      	b.n	800623e <_svfiprintf_r+0xf6>
 800621e:	462f      	mov	r7, r5
 8006220:	e7b8      	b.n	8006194 <_svfiprintf_r+0x4c>
 8006222:	4a40      	ldr	r2, [pc, #256]	; (8006324 <_svfiprintf_r+0x1dc>)
 8006224:	1a80      	subs	r0, r0, r2
 8006226:	fa0b f000 	lsl.w	r0, fp, r0
 800622a:	4318      	orrs	r0, r3
 800622c:	9004      	str	r0, [sp, #16]
 800622e:	463d      	mov	r5, r7
 8006230:	e7d3      	b.n	80061da <_svfiprintf_r+0x92>
 8006232:	9a03      	ldr	r2, [sp, #12]
 8006234:	1d11      	adds	r1, r2, #4
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	9103      	str	r1, [sp, #12]
 800623a:	2a00      	cmp	r2, #0
 800623c:	db01      	blt.n	8006242 <_svfiprintf_r+0xfa>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e004      	b.n	800624c <_svfiprintf_r+0x104>
 8006242:	4252      	negs	r2, r2
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	9207      	str	r2, [sp, #28]
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	783b      	ldrb	r3, [r7, #0]
 800624e:	2b2e      	cmp	r3, #46	; 0x2e
 8006250:	d10c      	bne.n	800626c <_svfiprintf_r+0x124>
 8006252:	787b      	ldrb	r3, [r7, #1]
 8006254:	2b2a      	cmp	r3, #42	; 0x2a
 8006256:	d133      	bne.n	80062c0 <_svfiprintf_r+0x178>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	1d1a      	adds	r2, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	9203      	str	r2, [sp, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfb8      	it	lt
 8006264:	f04f 33ff 	movlt.w	r3, #4294967295
 8006268:	3702      	adds	r7, #2
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	4d2e      	ldr	r5, [pc, #184]	; (8006328 <_svfiprintf_r+0x1e0>)
 800626e:	7839      	ldrb	r1, [r7, #0]
 8006270:	2203      	movs	r2, #3
 8006272:	4628      	mov	r0, r5
 8006274:	f7f9 ffcc 	bl	8000210 <memchr>
 8006278:	b138      	cbz	r0, 800628a <_svfiprintf_r+0x142>
 800627a:	2340      	movs	r3, #64	; 0x40
 800627c:	1b40      	subs	r0, r0, r5
 800627e:	fa03 f000 	lsl.w	r0, r3, r0
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	4303      	orrs	r3, r0
 8006286:	3701      	adds	r7, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	7839      	ldrb	r1, [r7, #0]
 800628c:	4827      	ldr	r0, [pc, #156]	; (800632c <_svfiprintf_r+0x1e4>)
 800628e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006292:	2206      	movs	r2, #6
 8006294:	1c7e      	adds	r6, r7, #1
 8006296:	f7f9 ffbb 	bl	8000210 <memchr>
 800629a:	2800      	cmp	r0, #0
 800629c:	d038      	beq.n	8006310 <_svfiprintf_r+0x1c8>
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <_svfiprintf_r+0x1e8>)
 80062a0:	bb13      	cbnz	r3, 80062e8 <_svfiprintf_r+0x1a0>
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	3307      	adds	r3, #7
 80062a6:	f023 0307 	bic.w	r3, r3, #7
 80062aa:	3308      	adds	r3, #8
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	444b      	add	r3, r9
 80062b2:	9309      	str	r3, [sp, #36]	; 0x24
 80062b4:	e76d      	b.n	8006192 <_svfiprintf_r+0x4a>
 80062b6:	fb05 3202 	mla	r2, r5, r2, r3
 80062ba:	2001      	movs	r0, #1
 80062bc:	460f      	mov	r7, r1
 80062be:	e7a6      	b.n	800620e <_svfiprintf_r+0xc6>
 80062c0:	2300      	movs	r3, #0
 80062c2:	3701      	adds	r7, #1
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	4619      	mov	r1, r3
 80062c8:	250a      	movs	r5, #10
 80062ca:	4638      	mov	r0, r7
 80062cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d0:	3a30      	subs	r2, #48	; 0x30
 80062d2:	2a09      	cmp	r2, #9
 80062d4:	d903      	bls.n	80062de <_svfiprintf_r+0x196>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0c8      	beq.n	800626c <_svfiprintf_r+0x124>
 80062da:	9105      	str	r1, [sp, #20]
 80062dc:	e7c6      	b.n	800626c <_svfiprintf_r+0x124>
 80062de:	fb05 2101 	mla	r1, r5, r1, r2
 80062e2:	2301      	movs	r3, #1
 80062e4:	4607      	mov	r7, r0
 80062e6:	e7f0      	b.n	80062ca <_svfiprintf_r+0x182>
 80062e8:	ab03      	add	r3, sp, #12
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4622      	mov	r2, r4
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <_svfiprintf_r+0x1ec>)
 80062f0:	a904      	add	r1, sp, #16
 80062f2:	4640      	mov	r0, r8
 80062f4:	f3af 8000 	nop.w
 80062f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062fc:	4681      	mov	r9, r0
 80062fe:	d1d6      	bne.n	80062ae <_svfiprintf_r+0x166>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	065b      	lsls	r3, r3, #25
 8006304:	f53f af35 	bmi.w	8006172 <_svfiprintf_r+0x2a>
 8006308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630a:	b01d      	add	sp, #116	; 0x74
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	4622      	mov	r2, r4
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <_svfiprintf_r+0x1ec>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	4640      	mov	r0, r8
 800631c:	f000 f882 	bl	8006424 <_printf_i>
 8006320:	e7ea      	b.n	80062f8 <_svfiprintf_r+0x1b0>
 8006322:	bf00      	nop
 8006324:	080068c8 	.word	0x080068c8
 8006328:	080068ce 	.word	0x080068ce
 800632c:	080068d2 	.word	0x080068d2
 8006330:	00000000 	.word	0x00000000
 8006334:	08006095 	.word	0x08006095

08006338 <_printf_common>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	4691      	mov	r9, r2
 800633e:	461f      	mov	r7, r3
 8006340:	688a      	ldr	r2, [r1, #8]
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006348:	4293      	cmp	r3, r2
 800634a:	bfb8      	it	lt
 800634c:	4613      	movlt	r3, r2
 800634e:	f8c9 3000 	str.w	r3, [r9]
 8006352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006356:	4606      	mov	r6, r0
 8006358:	460c      	mov	r4, r1
 800635a:	b112      	cbz	r2, 8006362 <_printf_common+0x2a>
 800635c:	3301      	adds	r3, #1
 800635e:	f8c9 3000 	str.w	r3, [r9]
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	0699      	lsls	r1, r3, #26
 8006366:	bf42      	ittt	mi
 8006368:	f8d9 3000 	ldrmi.w	r3, [r9]
 800636c:	3302      	addmi	r3, #2
 800636e:	f8c9 3000 	strmi.w	r3, [r9]
 8006372:	6825      	ldr	r5, [r4, #0]
 8006374:	f015 0506 	ands.w	r5, r5, #6
 8006378:	d107      	bne.n	800638a <_printf_common+0x52>
 800637a:	f104 0a19 	add.w	sl, r4, #25
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	f8d9 2000 	ldr.w	r2, [r9]
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	42ab      	cmp	r3, r5
 8006388:	dc28      	bgt.n	80063dc <_printf_common+0xa4>
 800638a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800638e:	6822      	ldr	r2, [r4, #0]
 8006390:	3300      	adds	r3, #0
 8006392:	bf18      	it	ne
 8006394:	2301      	movne	r3, #1
 8006396:	0692      	lsls	r2, r2, #26
 8006398:	d42d      	bmi.n	80063f6 <_printf_common+0xbe>
 800639a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800639e:	4639      	mov	r1, r7
 80063a0:	4630      	mov	r0, r6
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d020      	beq.n	80063ea <_printf_common+0xb2>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	68e5      	ldr	r5, [r4, #12]
 80063ac:	f8d9 2000 	ldr.w	r2, [r9]
 80063b0:	f003 0306 	and.w	r3, r3, #6
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	bf08      	it	eq
 80063b8:	1aad      	subeq	r5, r5, r2
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	6922      	ldr	r2, [r4, #16]
 80063be:	bf0c      	ite	eq
 80063c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c4:	2500      	movne	r5, #0
 80063c6:	4293      	cmp	r3, r2
 80063c8:	bfc4      	itt	gt
 80063ca:	1a9b      	subgt	r3, r3, r2
 80063cc:	18ed      	addgt	r5, r5, r3
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	341a      	adds	r4, #26
 80063d4:	454d      	cmp	r5, r9
 80063d6:	d11a      	bne.n	800640e <_printf_common+0xd6>
 80063d8:	2000      	movs	r0, #0
 80063da:	e008      	b.n	80063ee <_printf_common+0xb6>
 80063dc:	2301      	movs	r3, #1
 80063de:	4652      	mov	r2, sl
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d103      	bne.n	80063f2 <_printf_common+0xba>
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	3501      	adds	r5, #1
 80063f4:	e7c3      	b.n	800637e <_printf_common+0x46>
 80063f6:	18e1      	adds	r1, r4, r3
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	2030      	movs	r0, #48	; 0x30
 80063fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006400:	4422      	add	r2, r4
 8006402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800640a:	3302      	adds	r3, #2
 800640c:	e7c5      	b.n	800639a <_printf_common+0x62>
 800640e:	2301      	movs	r3, #1
 8006410:	4622      	mov	r2, r4
 8006412:	4639      	mov	r1, r7
 8006414:	4630      	mov	r0, r6
 8006416:	47c0      	blx	r8
 8006418:	3001      	adds	r0, #1
 800641a:	d0e6      	beq.n	80063ea <_printf_common+0xb2>
 800641c:	f109 0901 	add.w	r9, r9, #1
 8006420:	e7d8      	b.n	80063d4 <_printf_common+0x9c>
	...

08006424 <_printf_i>:
 8006424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006428:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800642c:	460c      	mov	r4, r1
 800642e:	7e09      	ldrb	r1, [r1, #24]
 8006430:	b085      	sub	sp, #20
 8006432:	296e      	cmp	r1, #110	; 0x6e
 8006434:	4617      	mov	r7, r2
 8006436:	4606      	mov	r6, r0
 8006438:	4698      	mov	r8, r3
 800643a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643c:	f000 80b3 	beq.w	80065a6 <_printf_i+0x182>
 8006440:	d822      	bhi.n	8006488 <_printf_i+0x64>
 8006442:	2963      	cmp	r1, #99	; 0x63
 8006444:	d036      	beq.n	80064b4 <_printf_i+0x90>
 8006446:	d80a      	bhi.n	800645e <_printf_i+0x3a>
 8006448:	2900      	cmp	r1, #0
 800644a:	f000 80b9 	beq.w	80065c0 <_printf_i+0x19c>
 800644e:	2958      	cmp	r1, #88	; 0x58
 8006450:	f000 8083 	beq.w	800655a <_printf_i+0x136>
 8006454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006458:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800645c:	e032      	b.n	80064c4 <_printf_i+0xa0>
 800645e:	2964      	cmp	r1, #100	; 0x64
 8006460:	d001      	beq.n	8006466 <_printf_i+0x42>
 8006462:	2969      	cmp	r1, #105	; 0x69
 8006464:	d1f6      	bne.n	8006454 <_printf_i+0x30>
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	0605      	lsls	r5, r0, #24
 800646c:	f103 0104 	add.w	r1, r3, #4
 8006470:	d52a      	bpl.n	80064c8 <_printf_i+0xa4>
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	da03      	bge.n	8006482 <_printf_i+0x5e>
 800647a:	222d      	movs	r2, #45	; 0x2d
 800647c:	425b      	negs	r3, r3
 800647e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006482:	486f      	ldr	r0, [pc, #444]	; (8006640 <_printf_i+0x21c>)
 8006484:	220a      	movs	r2, #10
 8006486:	e039      	b.n	80064fc <_printf_i+0xd8>
 8006488:	2973      	cmp	r1, #115	; 0x73
 800648a:	f000 809d 	beq.w	80065c8 <_printf_i+0x1a4>
 800648e:	d808      	bhi.n	80064a2 <_printf_i+0x7e>
 8006490:	296f      	cmp	r1, #111	; 0x6f
 8006492:	d020      	beq.n	80064d6 <_printf_i+0xb2>
 8006494:	2970      	cmp	r1, #112	; 0x70
 8006496:	d1dd      	bne.n	8006454 <_printf_i+0x30>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	f043 0320 	orr.w	r3, r3, #32
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	e003      	b.n	80064aa <_printf_i+0x86>
 80064a2:	2975      	cmp	r1, #117	; 0x75
 80064a4:	d017      	beq.n	80064d6 <_printf_i+0xb2>
 80064a6:	2978      	cmp	r1, #120	; 0x78
 80064a8:	d1d4      	bne.n	8006454 <_printf_i+0x30>
 80064aa:	2378      	movs	r3, #120	; 0x78
 80064ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064b0:	4864      	ldr	r0, [pc, #400]	; (8006644 <_printf_i+0x220>)
 80064b2:	e055      	b.n	8006560 <_printf_i+0x13c>
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	1d19      	adds	r1, r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6011      	str	r1, [r2, #0]
 80064bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c4:	2301      	movs	r3, #1
 80064c6:	e08c      	b.n	80065e2 <_printf_i+0x1be>
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6011      	str	r1, [r2, #0]
 80064cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064d0:	bf18      	it	ne
 80064d2:	b21b      	sxthne	r3, r3
 80064d4:	e7cf      	b.n	8006476 <_printf_i+0x52>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1d18      	adds	r0, r3, #4
 80064dc:	6010      	str	r0, [r2, #0]
 80064de:	0628      	lsls	r0, r5, #24
 80064e0:	d501      	bpl.n	80064e6 <_printf_i+0xc2>
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	e002      	b.n	80064ec <_printf_i+0xc8>
 80064e6:	0668      	lsls	r0, r5, #25
 80064e8:	d5fb      	bpl.n	80064e2 <_printf_i+0xbe>
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	4854      	ldr	r0, [pc, #336]	; (8006640 <_printf_i+0x21c>)
 80064ee:	296f      	cmp	r1, #111	; 0x6f
 80064f0:	bf14      	ite	ne
 80064f2:	220a      	movne	r2, #10
 80064f4:	2208      	moveq	r2, #8
 80064f6:	2100      	movs	r1, #0
 80064f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fc:	6865      	ldr	r5, [r4, #4]
 80064fe:	60a5      	str	r5, [r4, #8]
 8006500:	2d00      	cmp	r5, #0
 8006502:	f2c0 8095 	blt.w	8006630 <_printf_i+0x20c>
 8006506:	6821      	ldr	r1, [r4, #0]
 8006508:	f021 0104 	bic.w	r1, r1, #4
 800650c:	6021      	str	r1, [r4, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d13d      	bne.n	800658e <_printf_i+0x16a>
 8006512:	2d00      	cmp	r5, #0
 8006514:	f040 808e 	bne.w	8006634 <_printf_i+0x210>
 8006518:	4665      	mov	r5, ip
 800651a:	2a08      	cmp	r2, #8
 800651c:	d10b      	bne.n	8006536 <_printf_i+0x112>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	07db      	lsls	r3, r3, #31
 8006522:	d508      	bpl.n	8006536 <_printf_i+0x112>
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	bfde      	ittt	le
 800652c:	2330      	movle	r3, #48	; 0x30
 800652e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006536:	ebac 0305 	sub.w	r3, ip, r5
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	f8cd 8000 	str.w	r8, [sp]
 8006540:	463b      	mov	r3, r7
 8006542:	aa03      	add	r2, sp, #12
 8006544:	4621      	mov	r1, r4
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff fef6 	bl	8006338 <_printf_common>
 800654c:	3001      	adds	r0, #1
 800654e:	d14d      	bne.n	80065ec <_printf_i+0x1c8>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	b005      	add	sp, #20
 8006556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655a:	4839      	ldr	r0, [pc, #228]	; (8006640 <_printf_i+0x21c>)
 800655c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	6821      	ldr	r1, [r4, #0]
 8006564:	1d1d      	adds	r5, r3, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6015      	str	r5, [r2, #0]
 800656a:	060a      	lsls	r2, r1, #24
 800656c:	d50b      	bpl.n	8006586 <_printf_i+0x162>
 800656e:	07ca      	lsls	r2, r1, #31
 8006570:	bf44      	itt	mi
 8006572:	f041 0120 	orrmi.w	r1, r1, #32
 8006576:	6021      	strmi	r1, [r4, #0]
 8006578:	b91b      	cbnz	r3, 8006582 <_printf_i+0x15e>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	f022 0220 	bic.w	r2, r2, #32
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	2210      	movs	r2, #16
 8006584:	e7b7      	b.n	80064f6 <_printf_i+0xd2>
 8006586:	064d      	lsls	r5, r1, #25
 8006588:	bf48      	it	mi
 800658a:	b29b      	uxthmi	r3, r3
 800658c:	e7ef      	b.n	800656e <_printf_i+0x14a>
 800658e:	4665      	mov	r5, ip
 8006590:	fbb3 f1f2 	udiv	r1, r3, r2
 8006594:	fb02 3311 	mls	r3, r2, r1, r3
 8006598:	5cc3      	ldrb	r3, [r0, r3]
 800659a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800659e:	460b      	mov	r3, r1
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d1f5      	bne.n	8006590 <_printf_i+0x16c>
 80065a4:	e7b9      	b.n	800651a <_printf_i+0xf6>
 80065a6:	6813      	ldr	r3, [r2, #0]
 80065a8:	6825      	ldr	r5, [r4, #0]
 80065aa:	6961      	ldr	r1, [r4, #20]
 80065ac:	1d18      	adds	r0, r3, #4
 80065ae:	6010      	str	r0, [r2, #0]
 80065b0:	0628      	lsls	r0, r5, #24
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	d501      	bpl.n	80065ba <_printf_i+0x196>
 80065b6:	6019      	str	r1, [r3, #0]
 80065b8:	e002      	b.n	80065c0 <_printf_i+0x19c>
 80065ba:	066a      	lsls	r2, r5, #25
 80065bc:	d5fb      	bpl.n	80065b6 <_printf_i+0x192>
 80065be:	8019      	strh	r1, [r3, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	4665      	mov	r5, ip
 80065c6:	e7b9      	b.n	800653c <_printf_i+0x118>
 80065c8:	6813      	ldr	r3, [r2, #0]
 80065ca:	1d19      	adds	r1, r3, #4
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	681d      	ldr	r5, [r3, #0]
 80065d0:	6862      	ldr	r2, [r4, #4]
 80065d2:	2100      	movs	r1, #0
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7f9 fe1b 	bl	8000210 <memchr>
 80065da:	b108      	cbz	r0, 80065e0 <_printf_i+0x1bc>
 80065dc:	1b40      	subs	r0, r0, r5
 80065de:	6060      	str	r0, [r4, #4]
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	2300      	movs	r3, #0
 80065e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ea:	e7a7      	b.n	800653c <_printf_i+0x118>
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	462a      	mov	r2, r5
 80065f0:	4639      	mov	r1, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d0aa      	beq.n	8006550 <_printf_i+0x12c>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	079b      	lsls	r3, r3, #30
 80065fe:	d413      	bmi.n	8006628 <_printf_i+0x204>
 8006600:	68e0      	ldr	r0, [r4, #12]
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	4298      	cmp	r0, r3
 8006606:	bfb8      	it	lt
 8006608:	4618      	movlt	r0, r3
 800660a:	e7a3      	b.n	8006554 <_printf_i+0x130>
 800660c:	2301      	movs	r3, #1
 800660e:	464a      	mov	r2, r9
 8006610:	4639      	mov	r1, r7
 8006612:	4630      	mov	r0, r6
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d09a      	beq.n	8006550 <_printf_i+0x12c>
 800661a:	3501      	adds	r5, #1
 800661c:	68e3      	ldr	r3, [r4, #12]
 800661e:	9a03      	ldr	r2, [sp, #12]
 8006620:	1a9b      	subs	r3, r3, r2
 8006622:	42ab      	cmp	r3, r5
 8006624:	dcf2      	bgt.n	800660c <_printf_i+0x1e8>
 8006626:	e7eb      	b.n	8006600 <_printf_i+0x1dc>
 8006628:	2500      	movs	r5, #0
 800662a:	f104 0919 	add.w	r9, r4, #25
 800662e:	e7f5      	b.n	800661c <_printf_i+0x1f8>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ac      	bne.n	800658e <_printf_i+0x16a>
 8006634:	7803      	ldrb	r3, [r0, #0]
 8006636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800663a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663e:	e76c      	b.n	800651a <_printf_i+0xf6>
 8006640:	080068d9 	.word	0x080068d9
 8006644:	080068ea 	.word	0x080068ea

08006648 <memcpy>:
 8006648:	b510      	push	{r4, lr}
 800664a:	1e43      	subs	r3, r0, #1
 800664c:	440a      	add	r2, r1
 800664e:	4291      	cmp	r1, r2
 8006650:	d100      	bne.n	8006654 <memcpy+0xc>
 8006652:	bd10      	pop	{r4, pc}
 8006654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800665c:	e7f7      	b.n	800664e <memcpy+0x6>

0800665e <memmove>:
 800665e:	4288      	cmp	r0, r1
 8006660:	b510      	push	{r4, lr}
 8006662:	eb01 0302 	add.w	r3, r1, r2
 8006666:	d807      	bhi.n	8006678 <memmove+0x1a>
 8006668:	1e42      	subs	r2, r0, #1
 800666a:	4299      	cmp	r1, r3
 800666c:	d00a      	beq.n	8006684 <memmove+0x26>
 800666e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006672:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006676:	e7f8      	b.n	800666a <memmove+0xc>
 8006678:	4283      	cmp	r3, r0
 800667a:	d9f5      	bls.n	8006668 <memmove+0xa>
 800667c:	1881      	adds	r1, r0, r2
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	42d3      	cmn	r3, r2
 8006682:	d100      	bne.n	8006686 <memmove+0x28>
 8006684:	bd10      	pop	{r4, pc}
 8006686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800668a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800668e:	e7f7      	b.n	8006680 <memmove+0x22>

08006690 <_free_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4605      	mov	r5, r0
 8006694:	2900      	cmp	r1, #0
 8006696:	d045      	beq.n	8006724 <_free_r+0x94>
 8006698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669c:	1f0c      	subs	r4, r1, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfb8      	it	lt
 80066a2:	18e4      	addlt	r4, r4, r3
 80066a4:	f000 f8d2 	bl	800684c <__malloc_lock>
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <_free_r+0x98>)
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	4610      	mov	r0, r2
 80066ae:	b933      	cbnz	r3, 80066be <_free_r+0x2e>
 80066b0:	6063      	str	r3, [r4, #4]
 80066b2:	6014      	str	r4, [r2, #0]
 80066b4:	4628      	mov	r0, r5
 80066b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ba:	f000 b8c8 	b.w	800684e <__malloc_unlock>
 80066be:	42a3      	cmp	r3, r4
 80066c0:	d90c      	bls.n	80066dc <_free_r+0x4c>
 80066c2:	6821      	ldr	r1, [r4, #0]
 80066c4:	1862      	adds	r2, r4, r1
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bf04      	itt	eq
 80066ca:	681a      	ldreq	r2, [r3, #0]
 80066cc:	685b      	ldreq	r3, [r3, #4]
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	bf04      	itt	eq
 80066d2:	1852      	addeq	r2, r2, r1
 80066d4:	6022      	streq	r2, [r4, #0]
 80066d6:	6004      	str	r4, [r0, #0]
 80066d8:	e7ec      	b.n	80066b4 <_free_r+0x24>
 80066da:	4613      	mov	r3, r2
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	b10a      	cbz	r2, 80066e4 <_free_r+0x54>
 80066e0:	42a2      	cmp	r2, r4
 80066e2:	d9fa      	bls.n	80066da <_free_r+0x4a>
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	1858      	adds	r0, r3, r1
 80066e8:	42a0      	cmp	r0, r4
 80066ea:	d10b      	bne.n	8006704 <_free_r+0x74>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	4401      	add	r1, r0
 80066f0:	1858      	adds	r0, r3, r1
 80066f2:	4282      	cmp	r2, r0
 80066f4:	6019      	str	r1, [r3, #0]
 80066f6:	d1dd      	bne.n	80066b4 <_free_r+0x24>
 80066f8:	6810      	ldr	r0, [r2, #0]
 80066fa:	6852      	ldr	r2, [r2, #4]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	4401      	add	r1, r0
 8006700:	6019      	str	r1, [r3, #0]
 8006702:	e7d7      	b.n	80066b4 <_free_r+0x24>
 8006704:	d902      	bls.n	800670c <_free_r+0x7c>
 8006706:	230c      	movs	r3, #12
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	e7d3      	b.n	80066b4 <_free_r+0x24>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	1821      	adds	r1, r4, r0
 8006710:	428a      	cmp	r2, r1
 8006712:	bf04      	itt	eq
 8006714:	6811      	ldreq	r1, [r2, #0]
 8006716:	6852      	ldreq	r2, [r2, #4]
 8006718:	6062      	str	r2, [r4, #4]
 800671a:	bf04      	itt	eq
 800671c:	1809      	addeq	r1, r1, r0
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	605c      	str	r4, [r3, #4]
 8006722:	e7c7      	b.n	80066b4 <_free_r+0x24>
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	200000ac 	.word	0x200000ac

0800672c <_malloc_r>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	1ccd      	adds	r5, r1, #3
 8006730:	f025 0503 	bic.w	r5, r5, #3
 8006734:	3508      	adds	r5, #8
 8006736:	2d0c      	cmp	r5, #12
 8006738:	bf38      	it	cc
 800673a:	250c      	movcc	r5, #12
 800673c:	2d00      	cmp	r5, #0
 800673e:	4606      	mov	r6, r0
 8006740:	db01      	blt.n	8006746 <_malloc_r+0x1a>
 8006742:	42a9      	cmp	r1, r5
 8006744:	d903      	bls.n	800674e <_malloc_r+0x22>
 8006746:	230c      	movs	r3, #12
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	2000      	movs	r0, #0
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	f000 f87d 	bl	800684c <__malloc_lock>
 8006752:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <_malloc_r+0xac>)
 8006754:	6814      	ldr	r4, [r2, #0]
 8006756:	4621      	mov	r1, r4
 8006758:	b991      	cbnz	r1, 8006780 <_malloc_r+0x54>
 800675a:	4c20      	ldr	r4, [pc, #128]	; (80067dc <_malloc_r+0xb0>)
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	b91b      	cbnz	r3, 8006768 <_malloc_r+0x3c>
 8006760:	4630      	mov	r0, r6
 8006762:	f000 f863 	bl	800682c <_sbrk_r>
 8006766:	6020      	str	r0, [r4, #0]
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f000 f85e 	bl	800682c <_sbrk_r>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d124      	bne.n	80067be <_malloc_r+0x92>
 8006774:	230c      	movs	r3, #12
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f868 	bl	800684e <__malloc_unlock>
 800677e:	e7e4      	b.n	800674a <_malloc_r+0x1e>
 8006780:	680b      	ldr	r3, [r1, #0]
 8006782:	1b5b      	subs	r3, r3, r5
 8006784:	d418      	bmi.n	80067b8 <_malloc_r+0x8c>
 8006786:	2b0b      	cmp	r3, #11
 8006788:	d90f      	bls.n	80067aa <_malloc_r+0x7e>
 800678a:	600b      	str	r3, [r1, #0]
 800678c:	50cd      	str	r5, [r1, r3]
 800678e:	18cc      	adds	r4, r1, r3
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f85c 	bl	800684e <__malloc_unlock>
 8006796:	f104 000b 	add.w	r0, r4, #11
 800679a:	1d23      	adds	r3, r4, #4
 800679c:	f020 0007 	bic.w	r0, r0, #7
 80067a0:	1ac3      	subs	r3, r0, r3
 80067a2:	d0d3      	beq.n	800674c <_malloc_r+0x20>
 80067a4:	425a      	negs	r2, r3
 80067a6:	50e2      	str	r2, [r4, r3]
 80067a8:	e7d0      	b.n	800674c <_malloc_r+0x20>
 80067aa:	428c      	cmp	r4, r1
 80067ac:	684b      	ldr	r3, [r1, #4]
 80067ae:	bf16      	itet	ne
 80067b0:	6063      	strne	r3, [r4, #4]
 80067b2:	6013      	streq	r3, [r2, #0]
 80067b4:	460c      	movne	r4, r1
 80067b6:	e7eb      	b.n	8006790 <_malloc_r+0x64>
 80067b8:	460c      	mov	r4, r1
 80067ba:	6849      	ldr	r1, [r1, #4]
 80067bc:	e7cc      	b.n	8006758 <_malloc_r+0x2c>
 80067be:	1cc4      	adds	r4, r0, #3
 80067c0:	f024 0403 	bic.w	r4, r4, #3
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d005      	beq.n	80067d4 <_malloc_r+0xa8>
 80067c8:	1a21      	subs	r1, r4, r0
 80067ca:	4630      	mov	r0, r6
 80067cc:	f000 f82e 	bl	800682c <_sbrk_r>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d0cf      	beq.n	8006774 <_malloc_r+0x48>
 80067d4:	6025      	str	r5, [r4, #0]
 80067d6:	e7db      	b.n	8006790 <_malloc_r+0x64>
 80067d8:	200000ac 	.word	0x200000ac
 80067dc:	200000b0 	.word	0x200000b0

080067e0 <_realloc_r>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	4607      	mov	r7, r0
 80067e4:	4614      	mov	r4, r2
 80067e6:	460e      	mov	r6, r1
 80067e8:	b921      	cbnz	r1, 80067f4 <_realloc_r+0x14>
 80067ea:	4611      	mov	r1, r2
 80067ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067f0:	f7ff bf9c 	b.w	800672c <_malloc_r>
 80067f4:	b922      	cbnz	r2, 8006800 <_realloc_r+0x20>
 80067f6:	f7ff ff4b 	bl	8006690 <_free_r>
 80067fa:	4625      	mov	r5, r4
 80067fc:	4628      	mov	r0, r5
 80067fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006800:	f000 f826 	bl	8006850 <_malloc_usable_size_r>
 8006804:	42a0      	cmp	r0, r4
 8006806:	d20f      	bcs.n	8006828 <_realloc_r+0x48>
 8006808:	4621      	mov	r1, r4
 800680a:	4638      	mov	r0, r7
 800680c:	f7ff ff8e 	bl	800672c <_malloc_r>
 8006810:	4605      	mov	r5, r0
 8006812:	2800      	cmp	r0, #0
 8006814:	d0f2      	beq.n	80067fc <_realloc_r+0x1c>
 8006816:	4631      	mov	r1, r6
 8006818:	4622      	mov	r2, r4
 800681a:	f7ff ff15 	bl	8006648 <memcpy>
 800681e:	4631      	mov	r1, r6
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ff35 	bl	8006690 <_free_r>
 8006826:	e7e9      	b.n	80067fc <_realloc_r+0x1c>
 8006828:	4635      	mov	r5, r6
 800682a:	e7e7      	b.n	80067fc <_realloc_r+0x1c>

0800682c <_sbrk_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4c06      	ldr	r4, [pc, #24]	; (8006848 <_sbrk_r+0x1c>)
 8006830:	2300      	movs	r3, #0
 8006832:	4605      	mov	r5, r0
 8006834:	4608      	mov	r0, r1
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	f7fb fa4e 	bl	8001cd8 <_sbrk>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_sbrk_r+0x1a>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	b103      	cbz	r3, 8006846 <_sbrk_r+0x1a>
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	200002ac 	.word	0x200002ac

0800684c <__malloc_lock>:
 800684c:	4770      	bx	lr

0800684e <__malloc_unlock>:
 800684e:	4770      	bx	lr

08006850 <_malloc_usable_size_r>:
 8006850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006854:	1f18      	subs	r0, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfbc      	itt	lt
 800685a:	580b      	ldrlt	r3, [r1, r0]
 800685c:	18c0      	addlt	r0, r0, r3
 800685e:	4770      	bx	lr

08006860 <_init>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr

0800686c <_fini>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr
